
edesign314.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062a4  080062a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080062a4  080062a4  000162a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062ac  080062ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062ac  080062ac  000162ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062b0  080062b0  000162b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080062b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020b0  2000000c  080062c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020bc  080062c0  000220bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e732  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002214  00000000  00000000  0002e76e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec0  00000000  00000000  00030988  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da8  00000000  00000000  00031848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000228fa  00000000  00000000  000325f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b685  00000000  00000000  00054eea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4ead  00000000  00000000  0006056f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013541c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f60  00000000  00000000  00135498  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005e6c 	.word	0x08005e6c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08005e6c 	.word	0x08005e6c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	huart2.gState = HAL_UART_STATE_READY;
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <HAL_ADC_ConvCpltCallback+0x28>)
 800050e:	2220      	movs	r2, #32
 8000510:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	HAL_UART_Transmit_DMA(&huart2, track+512, 512);
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800051a:	4619      	mov	r1, r3
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <HAL_ADC_ConvCpltCallback+0x28>)
 800051e:	f004 f9cd 	bl	80048bc <HAL_UART_Transmit_DMA>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20001a10 	.word	0x20001a10
 8000530:	20001cb0 	.word	0x20001cb0

08000534 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	huart2.gState = HAL_UART_STATE_READY;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 800053e:	2220      	movs	r2, #32
 8000540:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	HAL_UART_Transmit_DMA(&huart2, track, 512);
 8000544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000548:	4904      	ldr	r1, [pc, #16]	; (800055c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 800054a:	4803      	ldr	r0, [pc, #12]	; (8000558 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 800054c:	f004 f9b6 	bl	80048bc <HAL_UART_Transmit_DMA>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20001a10 	.word	0x20001a10
 800055c:	20001ab0 	.word	0x20001ab0

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f001 fa53 	bl	8001a10 <HAL_Init>

  /* USER CODE BEGIN Init */
  wave_init();
 800056a:	f000 ff15 	bl	8001398 <wave_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 fb7b 	bl	8000c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 fdb7 	bl	80010e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000576:	f000 fd77 	bl	8001068 <MX_DMA_Init>
  MX_TIM2_Init();
 800057a:	f000 fc61 	bl	8000e40 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800057e:	f000 fd49 	bl	8001014 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000582:	f000 fc33 	bl	8000dec <MX_DAC_Init>
  MX_TIM4_Init();
 8000586:	f000 fcf7 	bl	8000f78 <MX_TIM4_Init>
  MX_ADC2_Init();
 800058a:	f000 fbdb 	bl	8000d44 <MX_ADC2_Init>
  MX_TIM3_Init();
 800058e:	f000 fca5 	bl	8000edc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_ENABLE(&htim2);
 8000592:	4bb0      	ldr	r3, [pc, #704]	; (8000854 <main+0x2f4>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	4bae      	ldr	r3, [pc, #696]	; (8000854 <main+0x2f4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f042 0201 	orr.w	r2, r2, #1
 80005a0:	601a      	str	r2, [r3, #0]
   __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 80005a2:	4bac      	ldr	r3, [pc, #688]	; (8000854 <main+0x2f4>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	68da      	ldr	r2, [r3, #12]
 80005a8:	4baa      	ldr	r3, [pc, #680]	; (8000854 <main+0x2f4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f042 0201 	orr.w	r2, r2, #1
 80005b0:	60da      	str	r2, [r3, #12]
   __HAL_TIM_ENABLE(&htim3);
 80005b2:	4ba9      	ldr	r3, [pc, #676]	; (8000858 <main+0x2f8>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4ba7      	ldr	r3, [pc, #668]	; (8000858 <main+0x2f8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f042 0201 	orr.w	r2, r2, #1
 80005c0:	601a      	str	r2, [r3, #0]
   //HAL_TIM_Base_Start(&htim3);
   HAL_TIM_Base_Start(&htim4);
 80005c2:	48a6      	ldr	r0, [pc, #664]	; (800085c <main+0x2fc>)
 80005c4:	f003 fcb5 	bl	8003f32 <HAL_TIM_Base_Start>




  uint8_t begin = 0; //used in every state for every track to trigger the actions that need to happen only once
 80005c8:	2300      	movs	r3, #0
 80005ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t refTick = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t playing = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  uint32_t button1Tick = 0; //counter to save how long button has been high
 80005d8:	2300      	movs	r3, #0
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t button2Tick = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t button3Tick = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	63bb      	str	r3, [r7, #56]	; 0x38

  uint8_t startup_msg[10] = {127, 128, '2', '0', '8', '2', '6', '7', '0', '2'};
 80005e4:	4a9e      	ldr	r2, [pc, #632]	; (8000860 <main+0x300>)
 80005e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80005ec:	c303      	stmia	r3!, {r0, r1}
 80005ee:	801a      	strh	r2, [r3, #0]
  uint8_t record_msg[10] = {127, 128, 'R', 'e', 'c', 'o', 'r', 'd', '_', '_'};
 80005f0:	4a9c      	ldr	r2, [pc, #624]	; (8000864 <main+0x304>)
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80005f8:	c303      	stmia	r3!, {r0, r1}
 80005fa:	801a      	strh	r2, [r3, #0]
  uint8_t playback_msg[10] = {127, 128, 'P', 'l', 'a', 'y', '_', '_', '_', '_'};
 80005fc:	4a9a      	ldr	r2, [pc, #616]	; (8000868 <main+0x308>)
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	ca07      	ldmia	r2, {r0, r1, r2}
 8000604:	c303      	stmia	r3!, {r0, r1}
 8000606:	801a      	strh	r2, [r3, #0]
  uint8_t stop_msg[10] = {127, 128, 'S', 't', 'o', 'p', '_', '_', '_', '_'};
 8000608:	4a98      	ldr	r2, [pc, #608]	; (800086c <main+0x30c>)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	ca07      	ldmia	r2, {r0, r1, r2}
 800060e:	c303      	stmia	r3!, {r0, r1}
 8000610:	801a      	strh	r2, [r3, #0]

  wave_fillbuffer(sine440, 1, 1024);
 8000612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000616:	2101      	movs	r1, #1
 8000618:	4895      	ldr	r0, [pc, #596]	; (8000870 <main+0x310>)
 800061a:	f000 fef9 	bl	8001410 <wave_fillbuffer>
  wave_fillbuffer(sine523, 2, 1024);
 800061e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000622:	2102      	movs	r1, #2
 8000624:	4893      	ldr	r0, [pc, #588]	; (8000874 <main+0x314>)
 8000626:	f000 fef3 	bl	8001410 <wave_fillbuffer>
  wave_fillbuffer(sinesum, 3, 1024);
 800062a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800062e:	2103      	movs	r1, #3
 8000630:	4891      	ldr	r0, [pc, #580]	; (8000878 <main+0x318>)
 8000632:	f000 feed 	bl	8001410 <wave_fillbuffer>

  myState = Stop;
 8000636:	4b91      	ldr	r3, [pc, #580]	; (800087c <main+0x31c>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
  //STOP is state 1, PLAY is state 2, RECORD is state 3
  HAL_UART_Transmit(&huart2, startup_msg, 10, 1000);
 800063c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000644:	220a      	movs	r2, #10
 8000646:	488e      	ldr	r0, [pc, #568]	; (8000880 <main+0x320>)
 8000648:	f004 f89f 	bl	800478a <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  refTick = HAL_GetTick();
 800064c:	f001 fa46 	bl	8001adc <HAL_GetTick>
 8000650:	6378      	str	r0, [r7, #52]	; 0x34
	  if (myState == Stop) {
 8000652:	4b8a      	ldr	r3, [pc, #552]	; (800087c <main+0x31c>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	f040 8084 	bne.w	8000764 <main+0x204>
		  allLEDSoff();
 800065c:	f000 fdee 	bl	800123c <allLEDSoff>

		  //if button 1 is high, add to counter
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 8000660:	2140      	movs	r1, #64	; 0x40
 8000662:	4888      	ldr	r0, [pc, #544]	; (8000884 <main+0x324>)
 8000664:	f002 fef4 	bl	8003450 <HAL_GPIO_ReadPin>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d00e      	beq.n	800068c <main+0x12c>
			  button1Tick += (HAL_GetTick() - refTick);
 800066e:	f001 fa35 	bl	8001adc <HAL_GetTick>
 8000672:	4602      	mov	r2, r0
 8000674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800067a:	4413      	add	r3, r2
 800067c:	643b      	str	r3, [r7, #64]	; 0x40
			  if (button1Tick >= 10) button1 = 1;
 800067e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000680:	2b09      	cmp	r3, #9
 8000682:	d905      	bls.n	8000690 <main+0x130>
 8000684:	4b80      	ldr	r3, [pc, #512]	; (8000888 <main+0x328>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	e001      	b.n	8000690 <main+0x130>
		  }
		  else button1Tick = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	643b      	str	r3, [r7, #64]	; 0x40

		  //if button 2 is high, add to counter
		  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 8000690:	2140      	movs	r1, #64	; 0x40
 8000692:	487e      	ldr	r0, [pc, #504]	; (800088c <main+0x32c>)
 8000694:	f002 fedc 	bl	8003450 <HAL_GPIO_ReadPin>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d00e      	beq.n	80006bc <main+0x15c>
			  button2Tick += (HAL_GetTick() - refTick);
 800069e:	f001 fa1d 	bl	8001adc <HAL_GetTick>
 80006a2:	4602      	mov	r2, r0
 80006a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006aa:	4413      	add	r3, r2
 80006ac:	63fb      	str	r3, [r7, #60]	; 0x3c
			  if (button2Tick >= 10) button2 = 1;
 80006ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b0:	2b09      	cmp	r3, #9
 80006b2:	d905      	bls.n	80006c0 <main+0x160>
 80006b4:	4b76      	ldr	r3, [pc, #472]	; (8000890 <main+0x330>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	e001      	b.n	80006c0 <main+0x160>
		  }
		  else button2Tick = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c

		  //if button 3 is high, add to counter
		  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7)) {
 80006c0:	2180      	movs	r1, #128	; 0x80
 80006c2:	4874      	ldr	r0, [pc, #464]	; (8000894 <main+0x334>)
 80006c4:	f002 fec4 	bl	8003450 <HAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d00e      	beq.n	80006ec <main+0x18c>
			  button3Tick += (HAL_GetTick() - refTick);
 80006ce:	f001 fa05 	bl	8001adc <HAL_GetTick>
 80006d2:	4602      	mov	r2, r0
 80006d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80006da:	4413      	add	r3, r2
 80006dc:	63bb      	str	r3, [r7, #56]	; 0x38
			  if (button3Tick >= 10) button3 = 1;
 80006de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006e0:	2b09      	cmp	r3, #9
 80006e2:	d905      	bls.n	80006f0 <main+0x190>
 80006e4:	4b6c      	ldr	r3, [pc, #432]	; (8000898 <main+0x338>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	e001      	b.n	80006f0 <main+0x190>
		  }
		  else button3Tick = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38

		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) && (button1 || button2 || button3)){
 80006f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f4:	4863      	ldr	r0, [pc, #396]	; (8000884 <main+0x324>)
 80006f6:	f002 feab 	bl	8003450 <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d015      	beq.n	800072c <main+0x1cc>
 8000700:	4b61      	ldr	r3, [pc, #388]	; (8000888 <main+0x328>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d107      	bne.n	8000718 <main+0x1b8>
 8000708:	4b61      	ldr	r3, [pc, #388]	; (8000890 <main+0x330>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d103      	bne.n	8000718 <main+0x1b8>
 8000710:	4b61      	ldr	r3, [pc, #388]	; (8000898 <main+0x338>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d009      	beq.n	800072c <main+0x1cc>
			  myState = Record;
 8000718:	4b58      	ldr	r3, [pc, #352]	; (800087c <main+0x31c>)
 800071a:	2202      	movs	r2, #2
 800071c:	701a      	strb	r2, [r3, #0]
			  begin = 1;
 800071e:	2301      	movs	r3, #1
 8000720:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			  buttonstop = 0;
 8000724:	4b5d      	ldr	r3, [pc, #372]	; (800089c <main+0x33c>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
 800072a:	e014      	b.n	8000756 <main+0x1f6>
		  }
		  else if ((button1)||(button2)||(button3)) {
 800072c:	4b56      	ldr	r3, [pc, #344]	; (8000888 <main+0x328>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d107      	bne.n	8000744 <main+0x1e4>
 8000734:	4b56      	ldr	r3, [pc, #344]	; (8000890 <main+0x330>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d103      	bne.n	8000744 <main+0x1e4>
 800073c:	4b56      	ldr	r3, [pc, #344]	; (8000898 <main+0x338>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d008      	beq.n	8000756 <main+0x1f6>
			  myState = Play;
 8000744:	4b4d      	ldr	r3, [pc, #308]	; (800087c <main+0x31c>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
			  begin = 1;
 800074a:	2301      	movs	r3, #1
 800074c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			  buttonstop = 0;
 8000750:	4b52      	ldr	r3, [pc, #328]	; (800089c <main+0x33c>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
		  }
		  if (buttonstop)
 8000756:	4b51      	ldr	r3, [pc, #324]	; (800089c <main+0x33c>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <main+0x204>
			  myState = Stop;
 800075e:	4b47      	ldr	r3, [pc, #284]	; (800087c <main+0x31c>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
	  }

	  if (myState == Play) {
 8000764:	4b45      	ldr	r3, [pc, #276]	; (800087c <main+0x31c>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	f040 814c 	bne.w	8000a06 <main+0x4a6>
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) {
 800076e:	2180      	movs	r1, #128	; 0x80
 8000770:	4844      	ldr	r0, [pc, #272]	; (8000884 <main+0x324>)
 8000772:	f002 fe6d 	bl	8003450 <HAL_GPIO_ReadPin>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d011      	beq.n	80007a0 <main+0x240>
			  buttonStopTick += (HAL_GetTick() - refTick);
 800077c:	f001 f9ae 	bl	8001adc <HAL_GetTick>
 8000780:	4602      	mov	r2, r0
 8000782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000784:	1ad2      	subs	r2, r2, r3
 8000786:	4b46      	ldr	r3, [pc, #280]	; (80008a0 <main+0x340>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a44      	ldr	r2, [pc, #272]	; (80008a0 <main+0x340>)
 800078e:	6013      	str	r3, [r2, #0]
			  if (buttonStopTick >= 10) buttonstop = 1;
 8000790:	4b43      	ldr	r3, [pc, #268]	; (80008a0 <main+0x340>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b09      	cmp	r3, #9
 8000796:	d906      	bls.n	80007a6 <main+0x246>
 8000798:	4b40      	ldr	r3, [pc, #256]	; (800089c <main+0x33c>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	e002      	b.n	80007a6 <main+0x246>
		  }
		  else {
			  buttonStopTick = 0;
 80007a0:	4b3f      	ldr	r3, [pc, #252]	; (80008a0 <main+0x340>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
		  }

		  if (button1 && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 80007a6:	4b38      	ldr	r3, [pc, #224]	; (8000888 <main+0x328>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d07e      	beq.n	80008ac <main+0x34c>
 80007ae:	2140      	movs	r1, #64	; 0x40
 80007b0:	4834      	ldr	r0, [pc, #208]	; (8000884 <main+0x324>)
 80007b2:	f002 fe4d 	bl	8003450 <HAL_GPIO_ReadPin>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d177      	bne.n	80008ac <main+0x34c>
			    if (begin && !playing) {
 80007bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d01c      	beq.n	80007fe <main+0x29e>
 80007c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d118      	bne.n	80007fe <main+0x29e>
			    	//if this is the beginning of the playback, send UART message and start timer
			    	playback_msg[9] = '1';
 80007cc:	2331      	movs	r3, #49	; 0x31
 80007ce:	767b      	strb	r3, [r7, #25]
			    	HAL_UART_Transmit(&huart2, playback_msg, 10, 1000);
 80007d0:	f107 0110 	add.w	r1, r7, #16
 80007d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d8:	220a      	movs	r2, #10
 80007da:	4829      	ldr	r0, [pc, #164]	; (8000880 <main+0x320>)
 80007dc:	f003 ffd5 	bl	800478a <HAL_UART_Transmit>
					begin = 0; //to ensure this block is executed only once in playback time
 80007e0:	2300      	movs	r3, #0
 80007e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					 HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) sine440, 1024, DAC_ALIGN_12B_R);
 80007e6:	2300      	movs	r3, #0
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ee:	4a20      	ldr	r2, [pc, #128]	; (8000870 <main+0x310>)
 80007f0:	2100      	movs	r1, #0
 80007f2:	482c      	ldr	r0, [pc, #176]	; (80008a4 <main+0x344>)
 80007f4:	f001 feec 	bl	80025d0 <HAL_DAC_Start_DMA>
					 playing = 1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			    }
			   if (!(buttonstop && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))) {
 80007fe:	4b27      	ldr	r3, [pc, #156]	; (800089c <main+0x33c>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d006      	beq.n	8000814 <main+0x2b4>
 8000806:	2180      	movs	r1, #128	; 0x80
 8000808:	481e      	ldr	r0, [pc, #120]	; (8000884 <main+0x324>)
 800080a:	f002 fe21 	bl	8003450 <HAL_GPIO_ReadPin>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d009      	beq.n	8000828 <main+0x2c8>
				   //if not exceeded max length, and stop is not pressed, flash LED
				   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, toggle);
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <main+0x348>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	461a      	mov	r2, r3
 800081c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000820:	4818      	ldr	r0, [pc, #96]	; (8000884 <main+0x324>)
 8000822:	f002 fe2d 	bl	8003480 <HAL_GPIO_WritePin>
			   if (!(buttonstop && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))) {
 8000826:	e0ee      	b.n	8000a06 <main+0x4a6>
			   }
			   else {
				   button1 = 0;
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <main+0x328>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
				   HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800082e:	2100      	movs	r1, #0
 8000830:	481c      	ldr	r0, [pc, #112]	; (80008a4 <main+0x344>)
 8000832:	f001 ff7b 	bl	800272c <HAL_DAC_Stop_DMA>
				   myState = Stop;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <main+0x31c>)
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
				   playing = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				   HAL_UART_Transmit(&huart2, stop_msg, 10, 1000);
 8000842:	1d39      	adds	r1, r7, #4
 8000844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000848:	220a      	movs	r2, #10
 800084a:	480d      	ldr	r0, [pc, #52]	; (8000880 <main+0x320>)
 800084c:	f003 ff9d 	bl	800478a <HAL_UART_Transmit>
			   if (!(buttonstop && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))) {
 8000850:	e0d9      	b.n	8000a06 <main+0x4a6>
 8000852:	bf00      	nop
 8000854:	200019d0 	.word	0x200019d0
 8000858:	200018bc 	.word	0x200018bc
 800085c:	20001830 	.word	0x20001830
 8000860:	08005e84 	.word	0x08005e84
 8000864:	08005e90 	.word	0x08005e90
 8000868:	08005e9c 	.word	0x08005e9c
 800086c:	08005ea8 	.word	0x08005ea8
 8000870:	20000030 	.word	0x20000030
 8000874:	20000830 	.word	0x20000830
 8000878:	20001030 	.word	0x20001030
 800087c:	200018b8 	.word	0x200018b8
 8000880:	20001a10 	.word	0x20001a10
 8000884:	40020000 	.word	0x40020000
 8000888:	20000028 	.word	0x20000028
 800088c:	40020400 	.word	0x40020400
 8000890:	20000029 	.word	0x20000029
 8000894:	40020800 	.word	0x40020800
 8000898:	2000002a 	.word	0x2000002a
 800089c:	2000002b 	.word	0x2000002b
 80008a0:	2000002c 	.word	0x2000002c
 80008a4:	200019bc 	.word	0x200019bc
 80008a8:	200020b4 	.word	0x200020b4
			   }
		  }

		  else if (button2 && !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 80008ac:	4bb2      	ldr	r3, [pc, #712]	; (8000b78 <main+0x618>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d050      	beq.n	8000956 <main+0x3f6>
 80008b4:	2140      	movs	r1, #64	; 0x40
 80008b6:	48b1      	ldr	r0, [pc, #708]	; (8000b7c <main+0x61c>)
 80008b8:	f002 fdca 	bl	8003450 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d149      	bne.n	8000956 <main+0x3f6>
			    if (begin && !playing) {
 80008c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d01c      	beq.n	8000904 <main+0x3a4>
 80008ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d118      	bne.n	8000904 <main+0x3a4>
			    	//if this is the beginning of the playback, send UART message and start timer
			    	playback_msg[9] = '2';
 80008d2:	2332      	movs	r3, #50	; 0x32
 80008d4:	767b      	strb	r3, [r7, #25]
			    	HAL_UART_Transmit(&huart2, playback_msg, 10, 1000);
 80008d6:	f107 0110 	add.w	r1, r7, #16
 80008da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008de:	220a      	movs	r2, #10
 80008e0:	48a7      	ldr	r0, [pc, #668]	; (8000b80 <main+0x620>)
 80008e2:	f003 ff52 	bl	800478a <HAL_UART_Transmit>
					begin = 0; //to ensure this block is executed only once in playback time
 80008e6:	2300      	movs	r3, #0
 80008e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) sine523, 1024, DAC_ALIGN_12B_R);
 80008ec:	2300      	movs	r3, #0
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f4:	4aa3      	ldr	r2, [pc, #652]	; (8000b84 <main+0x624>)
 80008f6:	2100      	movs	r1, #0
 80008f8:	48a3      	ldr	r0, [pc, #652]	; (8000b88 <main+0x628>)
 80008fa:	f001 fe69 	bl	80025d0 <HAL_DAC_Start_DMA>
					playing = 1;
 80008fe:	2301      	movs	r3, #1
 8000900:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			    }
			   if (!(buttonstop && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))) {
 8000904:	4ba1      	ldr	r3, [pc, #644]	; (8000b8c <main+0x62c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d006      	beq.n	800091a <main+0x3ba>
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	48a0      	ldr	r0, [pc, #640]	; (8000b90 <main+0x630>)
 8000910:	f002 fd9e 	bl	8003450 <HAL_GPIO_ReadPin>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d008      	beq.n	800092c <main+0x3cc>
				   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, toggle);
 800091a:	4b9e      	ldr	r3, [pc, #632]	; (8000b94 <main+0x634>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	461a      	mov	r2, r3
 8000922:	2110      	movs	r1, #16
 8000924:	4895      	ldr	r0, [pc, #596]	; (8000b7c <main+0x61c>)
 8000926:	f002 fdab 	bl	8003480 <HAL_GPIO_WritePin>
			   if (!(buttonstop && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))) {
 800092a:	e06c      	b.n	8000a06 <main+0x4a6>
			   }
			   else {
				   button2 = 0;
 800092c:	4b92      	ldr	r3, [pc, #584]	; (8000b78 <main+0x618>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
				   HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000932:	2100      	movs	r1, #0
 8000934:	4894      	ldr	r0, [pc, #592]	; (8000b88 <main+0x628>)
 8000936:	f001 fef9 	bl	800272c <HAL_DAC_Stop_DMA>
				   myState = Stop;
 800093a:	4b97      	ldr	r3, [pc, #604]	; (8000b98 <main+0x638>)
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
				   playing = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				   HAL_UART_Transmit(&huart2, stop_msg, 10, 1000);
 8000946:	1d39      	adds	r1, r7, #4
 8000948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094c:	220a      	movs	r2, #10
 800094e:	488c      	ldr	r0, [pc, #560]	; (8000b80 <main+0x620>)
 8000950:	f003 ff1b 	bl	800478a <HAL_UART_Transmit>
			   if (!(buttonstop && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))) {
 8000954:	e057      	b.n	8000a06 <main+0x4a6>
			   }
		  }
		  else if (button3 && !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7)) {
 8000956:	4b91      	ldr	r3, [pc, #580]	; (8000b9c <main+0x63c>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d050      	beq.n	8000a00 <main+0x4a0>
 800095e:	2180      	movs	r1, #128	; 0x80
 8000960:	488f      	ldr	r0, [pc, #572]	; (8000ba0 <main+0x640>)
 8000962:	f002 fd75 	bl	8003450 <HAL_GPIO_ReadPin>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d149      	bne.n	8000a00 <main+0x4a0>
			    if (begin && !playing) {
 800096c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000970:	2b00      	cmp	r3, #0
 8000972:	d01c      	beq.n	80009ae <main+0x44e>
 8000974:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000978:	2b00      	cmp	r3, #0
 800097a:	d118      	bne.n	80009ae <main+0x44e>
			    	//if this is the beginning of the playback, send UART message and start timer
			    	playback_msg[9] = '3';
 800097c:	2333      	movs	r3, #51	; 0x33
 800097e:	767b      	strb	r3, [r7, #25]
			    	HAL_UART_Transmit(&huart2, playback_msg, 10, 1000);
 8000980:	f107 0110 	add.w	r1, r7, #16
 8000984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000988:	220a      	movs	r2, #10
 800098a:	487d      	ldr	r0, [pc, #500]	; (8000b80 <main+0x620>)
 800098c:	f003 fefd 	bl	800478a <HAL_UART_Transmit>
					begin = 0; //to ensure this block is executed only once in playback time
 8000990:	2300      	movs	r3, #0
 8000992:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) sinesum, 1024, DAC_ALIGN_12B_R);
 8000996:	2300      	movs	r3, #0
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099e:	4a81      	ldr	r2, [pc, #516]	; (8000ba4 <main+0x644>)
 80009a0:	2100      	movs	r1, #0
 80009a2:	4879      	ldr	r0, [pc, #484]	; (8000b88 <main+0x628>)
 80009a4:	f001 fe14 	bl	80025d0 <HAL_DAC_Start_DMA>
					playing = 1;
 80009a8:	2301      	movs	r3, #1
 80009aa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			    }
			  if (!(buttonstop && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))) {
 80009ae:	4b77      	ldr	r3, [pc, #476]	; (8000b8c <main+0x62c>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d006      	beq.n	80009c4 <main+0x464>
 80009b6:	2180      	movs	r1, #128	; 0x80
 80009b8:	4875      	ldr	r0, [pc, #468]	; (8000b90 <main+0x630>)
 80009ba:	f002 fd49 	bl	8003450 <HAL_GPIO_ReadPin>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d008      	beq.n	80009d6 <main+0x476>
				   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, toggle);
 80009c4:	4b73      	ldr	r3, [pc, #460]	; (8000b94 <main+0x634>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	461a      	mov	r2, r3
 80009cc:	2120      	movs	r1, #32
 80009ce:	486b      	ldr	r0, [pc, #428]	; (8000b7c <main+0x61c>)
 80009d0:	f002 fd56 	bl	8003480 <HAL_GPIO_WritePin>
			  if (!(buttonstop && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))) {
 80009d4:	e017      	b.n	8000a06 <main+0x4a6>
			   }	//LED 3
			  else {
				  button3 = 0;
 80009d6:	4b71      	ldr	r3, [pc, #452]	; (8000b9c <main+0x63c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
				  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80009dc:	2100      	movs	r1, #0
 80009de:	486a      	ldr	r0, [pc, #424]	; (8000b88 <main+0x628>)
 80009e0:	f001 fea4 	bl	800272c <HAL_DAC_Stop_DMA>
				  myState = Stop;
 80009e4:	4b6c      	ldr	r3, [pc, #432]	; (8000b98 <main+0x638>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
				  playing = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				  HAL_UART_Transmit(&huart2, stop_msg, 10, 1000);
 80009f0:	1d39      	adds	r1, r7, #4
 80009f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f6:	220a      	movs	r2, #10
 80009f8:	4861      	ldr	r0, [pc, #388]	; (8000b80 <main+0x620>)
 80009fa:	f003 fec6 	bl	800478a <HAL_UART_Transmit>
			  if (!(buttonstop && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))) {
 80009fe:	e002      	b.n	8000a06 <main+0x4a6>
			  }
		  }
		  else myState = Stop;
 8000a00:	4b65      	ldr	r3, [pc, #404]	; (8000b98 <main+0x638>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
	  }

	  if (myState == Record) {
 8000a06:	4b64      	ldr	r3, [pc, #400]	; (8000b98 <main+0x638>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	f47f ae1e 	bne.w	800064c <main+0xec>
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) {
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	485f      	ldr	r0, [pc, #380]	; (8000b90 <main+0x630>)
 8000a14:	f002 fd1c 	bl	8003450 <HAL_GPIO_ReadPin>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d011      	beq.n	8000a42 <main+0x4e2>
			  buttonStopTick += (HAL_GetTick() - refTick);
 8000a1e:	f001 f85d 	bl	8001adc <HAL_GetTick>
 8000a22:	4602      	mov	r2, r0
 8000a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a26:	1ad2      	subs	r2, r2, r3
 8000a28:	4b5f      	ldr	r3, [pc, #380]	; (8000ba8 <main+0x648>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a5e      	ldr	r2, [pc, #376]	; (8000ba8 <main+0x648>)
 8000a30:	6013      	str	r3, [r2, #0]
			  if (buttonStopTick >= 10) buttonstop = 1;
 8000a32:	4b5d      	ldr	r3, [pc, #372]	; (8000ba8 <main+0x648>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b09      	cmp	r3, #9
 8000a38:	d906      	bls.n	8000a48 <main+0x4e8>
 8000a3a:	4b54      	ldr	r3, [pc, #336]	; (8000b8c <main+0x62c>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]
 8000a40:	e002      	b.n	8000a48 <main+0x4e8>
		  }
		  else {
			  buttonStopTick = 0;
 8000a42:	4b59      	ldr	r3, [pc, #356]	; (8000ba8 <main+0x648>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
		  }
		  if (button1 && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) {
 8000a48:	4b58      	ldr	r3, [pc, #352]	; (8000bac <main+0x64c>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d04d      	beq.n	8000aec <main+0x58c>
 8000a50:	2140      	movs	r1, #64	; 0x40
 8000a52:	484f      	ldr	r0, [pc, #316]	; (8000b90 <main+0x630>)
 8000a54:	f002 fcfc 	bl	8003450 <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d146      	bne.n	8000aec <main+0x58c>
			    if (begin) {
 8000a5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d019      	beq.n	8000a9a <main+0x53a>
			    	//if this is the beginning of the recording, turn REC LED on, send UART message and start timer
			    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a6c:	4848      	ldr	r0, [pc, #288]	; (8000b90 <main+0x630>)
 8000a6e:	f002 fd07 	bl	8003480 <HAL_GPIO_WritePin>
			    	record_msg[9] = '1';
 8000a72:	2331      	movs	r3, #49	; 0x31
 8000a74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			    	HAL_UART_Transmit(&huart2, record_msg, 10, 1000);
 8000a78:	f107 011c 	add.w	r1, r7, #28
 8000a7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a80:	220a      	movs	r2, #10
 8000a82:	483f      	ldr	r0, [pc, #252]	; (8000b80 <main+0x620>)
 8000a84:	f003 fe81 	bl	800478a <HAL_UART_Transmit>
					begin = 0; //to ensure this block is executed only once in recording time
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					HAL_ADC_Start_DMA(&hadc2, (uint32_t*) track, 1024);
 8000a8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a92:	4947      	ldr	r1, [pc, #284]	; (8000bb0 <main+0x650>)
 8000a94:	4847      	ldr	r0, [pc, #284]	; (8000bb4 <main+0x654>)
 8000a96:	f001 f871 	bl	8001b7c <HAL_ADC_Start_DMA>
			    }
			  //While stop button has not been pressed, flash LED
			  if (!(buttonstop && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))) {
 8000a9a:	4b3c      	ldr	r3, [pc, #240]	; (8000b8c <main+0x62c>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d006      	beq.n	8000ab0 <main+0x550>
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	483a      	ldr	r0, [pc, #232]	; (8000b90 <main+0x630>)
 8000aa6:	f002 fcd3 	bl	8003450 <HAL_GPIO_ReadPin>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d009      	beq.n	8000ac4 <main+0x564>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, toggle);
 8000ab0:	4b38      	ldr	r3, [pc, #224]	; (8000b94 <main+0x634>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000abc:	4834      	ldr	r0, [pc, #208]	; (8000b90 <main+0x630>)
 8000abe:	f002 fcdf 	bl	8003480 <HAL_GPIO_WritePin>
			  if (!(buttonstop && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))) {
 8000ac2:	e0bf      	b.n	8000c44 <main+0x6e4>
			  }
			  else {
				  button1 = 0;
 8000ac4:	4b39      	ldr	r3, [pc, #228]	; (8000bac <main+0x64c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
				  myState = Stop;
 8000aca:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <main+0x638>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
				  HAL_UART_DMAStop(&huart2);
 8000ad0:	482b      	ldr	r0, [pc, #172]	; (8000b80 <main+0x620>)
 8000ad2:	f003 ff5f 	bl	8004994 <HAL_UART_DMAStop>
				  HAL_UART_Transmit(&huart2, stop_msg, 10, 1000);
 8000ad6:	1d39      	adds	r1, r7, #4
 8000ad8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000adc:	220a      	movs	r2, #10
 8000ade:	4828      	ldr	r0, [pc, #160]	; (8000b80 <main+0x620>)
 8000ae0:	f003 fe53 	bl	800478a <HAL_UART_Transmit>
				  HAL_ADC_Stop_DMA(&hadc2);
 8000ae4:	4833      	ldr	r0, [pc, #204]	; (8000bb4 <main+0x654>)
 8000ae6:	f001 f93b 	bl	8001d60 <HAL_ADC_Stop_DMA>
			  if (!(buttonstop && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))) {
 8000aea:	e0ab      	b.n	8000c44 <main+0x6e4>

			  }
		  }
		  else if (button2 && !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 8000aec:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <main+0x618>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d061      	beq.n	8000bb8 <main+0x658>
 8000af4:	2140      	movs	r1, #64	; 0x40
 8000af6:	4821      	ldr	r0, [pc, #132]	; (8000b7c <main+0x61c>)
 8000af8:	f002 fcaa 	bl	8003450 <HAL_GPIO_ReadPin>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d15a      	bne.n	8000bb8 <main+0x658>
			    if (begin) {
 8000b02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d013      	beq.n	8000b32 <main+0x5d2>
			    	//if this is the beginning of the recording, turn REC LED on, send UART message and start timer
			    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b10:	481f      	ldr	r0, [pc, #124]	; (8000b90 <main+0x630>)
 8000b12:	f002 fcb5 	bl	8003480 <HAL_GPIO_WritePin>
			    	record_msg[9] = '2';
 8000b16:	2332      	movs	r3, #50	; 0x32
 8000b18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			    	HAL_UART_Transmit(&huart2, record_msg, 10, 1000);
 8000b1c:	f107 011c 	add.w	r1, r7, #28
 8000b20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b24:	220a      	movs	r2, #10
 8000b26:	4816      	ldr	r0, [pc, #88]	; (8000b80 <main+0x620>)
 8000b28:	f003 fe2f 	bl	800478a <HAL_UART_Transmit>
					begin = 0; //to ensure this block is executed only once in recording time
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			    }
				   if (!(buttonstop && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))) {
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <main+0x62c>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d006      	beq.n	8000b48 <main+0x5e8>
 8000b3a:	2180      	movs	r1, #128	; 0x80
 8000b3c:	4814      	ldr	r0, [pc, #80]	; (8000b90 <main+0x630>)
 8000b3e:	f002 fc87 	bl	8003450 <HAL_GPIO_ReadPin>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d008      	beq.n	8000b5a <main+0x5fa>
					   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, toggle);
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <main+0x634>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	2110      	movs	r1, #16
 8000b52:	480a      	ldr	r0, [pc, #40]	; (8000b7c <main+0x61c>)
 8000b54:	f002 fc94 	bl	8003480 <HAL_GPIO_WritePin>
				   if (!(buttonstop && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))) {
 8000b58:	e074      	b.n	8000c44 <main+0x6e4>
				   }
				   else {
					   button2 = 0;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <main+0x618>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
					   myState = Stop;
 8000b60:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <main+0x638>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
					   HAL_UART_Transmit(&huart2, stop_msg, 10, 1000);
 8000b66:	1d39      	adds	r1, r7, #4
 8000b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6c:	220a      	movs	r2, #10
 8000b6e:	4804      	ldr	r0, [pc, #16]	; (8000b80 <main+0x620>)
 8000b70:	f003 fe0b 	bl	800478a <HAL_UART_Transmit>
				   if (!(buttonstop && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))) {
 8000b74:	e066      	b.n	8000c44 <main+0x6e4>
 8000b76:	bf00      	nop
 8000b78:	20000029 	.word	0x20000029
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	20001a10 	.word	0x20001a10
 8000b84:	20000830 	.word	0x20000830
 8000b88:	200019bc 	.word	0x200019bc
 8000b8c:	2000002b 	.word	0x2000002b
 8000b90:	40020000 	.word	0x40020000
 8000b94:	200020b4 	.word	0x200020b4
 8000b98:	200018b8 	.word	0x200018b8
 8000b9c:	2000002a 	.word	0x2000002a
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	20001030 	.word	0x20001030
 8000ba8:	2000002c 	.word	0x2000002c
 8000bac:	20000028 	.word	0x20000028
 8000bb0:	20001ab0 	.word	0x20001ab0
 8000bb4:	20001870 	.word	0x20001870
				   }
		  }
		  else if (button3 && !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7)) {
 8000bb8:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <main+0x6e8>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f43f ad45 	beq.w	800064c <main+0xec>
 8000bc2:	2180      	movs	r1, #128	; 0x80
 8000bc4:	4821      	ldr	r0, [pc, #132]	; (8000c4c <main+0x6ec>)
 8000bc6:	f002 fc43 	bl	8003450 <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f47f ad3d 	bne.w	800064c <main+0xec>
			    if (begin) {
 8000bd2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d013      	beq.n	8000c02 <main+0x6a2>
			    	//if this is the beginning of the recording, turn REC LED on, send UART message and start timer
			    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be0:	481b      	ldr	r0, [pc, #108]	; (8000c50 <main+0x6f0>)
 8000be2:	f002 fc4d 	bl	8003480 <HAL_GPIO_WritePin>
			    	record_msg[9] = '3';
 8000be6:	2333      	movs	r3, #51	; 0x33
 8000be8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			    	HAL_UART_Transmit(&huart2, record_msg, 10, 1000);
 8000bec:	f107 011c 	add.w	r1, r7, #28
 8000bf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf4:	220a      	movs	r2, #10
 8000bf6:	4817      	ldr	r0, [pc, #92]	; (8000c54 <main+0x6f4>)
 8000bf8:	f003 fdc7 	bl	800478a <HAL_UART_Transmit>
					begin = 0; //to ensure this block is executed only once in recording time
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			    }
				   if (!(buttonstop && !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))) {
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <main+0x6f8>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d006      	beq.n	8000c18 <main+0x6b8>
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	4810      	ldr	r0, [pc, #64]	; (8000c50 <main+0x6f0>)
 8000c0e:	f002 fc1f 	bl	8003450 <HAL_GPIO_ReadPin>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d008      	beq.n	8000c2a <main+0x6ca>
					   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, toggle);
 8000c18:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <main+0x6fc>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	461a      	mov	r2, r3
 8000c20:	2120      	movs	r1, #32
 8000c22:	480f      	ldr	r0, [pc, #60]	; (8000c60 <main+0x700>)
 8000c24:	f002 fc2c 	bl	8003480 <HAL_GPIO_WritePin>
 8000c28:	e00c      	b.n	8000c44 <main+0x6e4>
				   }
				   else {
					   button3 = 0;
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <main+0x6e8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
					   myState = Stop;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <main+0x704>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
					   HAL_UART_Transmit(&huart2, stop_msg, 10, 1000);
 8000c36:	1d39      	adds	r1, r7, #4
 8000c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3c:	220a      	movs	r2, #10
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <main+0x6f4>)
 8000c40:	f003 fda3 	bl	800478a <HAL_UART_Transmit>
	  refTick = HAL_GetTick();
 8000c44:	e502      	b.n	800064c <main+0xec>
 8000c46:	bf00      	nop
 8000c48:	2000002a 	.word	0x2000002a
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	20001a10 	.word	0x20001a10
 8000c58:	2000002b 	.word	0x2000002b
 8000c5c:	200020b4 	.word	0x200020b4
 8000c60:	40020400 	.word	0x40020400
 8000c64:	200018b8 	.word	0x200018b8

08000c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b094      	sub	sp, #80	; 0x50
 8000c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	2234      	movs	r2, #52	; 0x34
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f004 fba4 	bl	80053c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7c:	f107 0308 	add.w	r3, r7, #8
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	4b2a      	ldr	r3, [pc, #168]	; (8000d3c <SystemClock_Config+0xd4>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	4a29      	ldr	r2, [pc, #164]	; (8000d3c <SystemClock_Config+0xd4>)
 8000c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9c:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <SystemClock_Config+0xd4>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ca8:	2300      	movs	r3, #0
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <SystemClock_Config+0xd8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cb4:	4a22      	ldr	r2, [pc, #136]	; (8000d40 <SystemClock_Config+0xd8>)
 8000cb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <SystemClock_Config+0xd8>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cdc:	2310      	movs	r3, #16
 8000cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ce0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ce4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 fe96 	bl	8003a28 <HAL_RCC_OscConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d02:	f000 fb41 	bl	8001388 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d06:	230f      	movs	r3, #15
 8000d08:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	2102      	movs	r1, #2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f002 fbc6 	bl	80034b4 <HAL_RCC_ClockConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d2e:	f000 fb2b 	bl	8001388 <Error_Handler>
  }
}
 8000d32:	bf00      	nop
 8000d34:	3750      	adds	r7, #80	; 0x50
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40007000 	.word	0x40007000

08000d44 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8000d56:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <MX_ADC2_Init+0xa0>)
 8000d58:	4a23      	ldr	r2, [pc, #140]	; (8000de8 <MX_ADC2_Init+0xa4>)
 8000d5a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d5c:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <MX_ADC2_Init+0xa0>)
 8000d5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d62:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <MX_ADC2_Init+0xa0>)
 8000d66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d6a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <MX_ADC2_Init+0xa0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_ADC2_Init+0xa0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_ADC2_Init+0xa0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_ADC2_Init+0xa0>)
 8000d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_ADC2_Init+0xa0>)
 8000d8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_ADC2_Init+0xa0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <MX_ADC2_Init+0xa0>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_ADC2_Init+0xa0>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_ADC2_Init+0xa0>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000daa:	480e      	ldr	r0, [pc, #56]	; (8000de4 <MX_ADC2_Init+0xa0>)
 8000dac:	f000 fea2 	bl	8001af4 <HAL_ADC_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_ADC2_Init+0x76>
  {
    Error_Handler();
 8000db6:	f000 fae7 	bl	8001388 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000dba:	230e      	movs	r3, #14
 8000dbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4806      	ldr	r0, [pc, #24]	; (8000de4 <MX_ADC2_Init+0xa0>)
 8000dcc:	f001 f81c 	bl	8001e08 <HAL_ADC_ConfigChannel>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_ADC2_Init+0x96>
  {
    Error_Handler();
 8000dd6:	f000 fad7 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20001870 	.word	0x20001870
 8000de8:	40012100 	.word	0x40012100

08000dec <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000df2:	463b      	mov	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_DAC_Init+0x4c>)
 8000dfc:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <MX_DAC_Init+0x50>)
 8000dfe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <MX_DAC_Init+0x4c>)
 8000e02:	f001 fbc2 	bl	800258a <HAL_DAC_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e0c:	f000 fabc 	bl	8001388 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8000e10:	232c      	movs	r3, #44	; 0x2c
 8000e12:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e18:	463b      	mov	r3, r7
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4806      	ldr	r0, [pc, #24]	; (8000e38 <MX_DAC_Init+0x4c>)
 8000e20:	f001 fccf 	bl	80027c2 <HAL_DAC_ConfigChannel>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e2a:	f000 faad 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200019bc 	.word	0x200019bc
 8000e3c:	40007400 	.word	0x40007400

08000e40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	463b      	mov	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000e64:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e66:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000e6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500;
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e74:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e86:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000e88:	f003 f828 	bl	8003edc <HAL_TIM_Base_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e92:	f000 fa79 	bl	8001388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000ea4:	f003 f971 	bl	800418a <HAL_TIM_ConfigClockSource>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000eae:	f000 fa6b 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <MX_TIM2_Init+0x98>)
 8000ec0:	f003 fb86 	bl	80045d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000eca:	f000 fa5d 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200019d0 	.word	0x200019d0

08000edc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <MX_TIM3_Init+0x94>)
 8000efa:	4a1e      	ldr	r2, [pc, #120]	; (8000f74 <MX_TIM3_Init+0x98>)
 8000efc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000efe:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <MX_TIM3_Init+0x94>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_TIM3_Init+0x94>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1905;
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <MX_TIM3_Init+0x94>)
 8000f0c:	f240 7271 	movw	r2, #1905	; 0x771
 8000f10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MX_TIM3_Init+0x94>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_TIM3_Init+0x94>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f1e:	4814      	ldr	r0, [pc, #80]	; (8000f70 <MX_TIM3_Init+0x94>)
 8000f20:	f002 ffdc 	bl	8003edc <HAL_TIM_Base_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f2a:	f000 fa2d 	bl	8001388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480d      	ldr	r0, [pc, #52]	; (8000f70 <MX_TIM3_Init+0x94>)
 8000f3c:	f003 f925 	bl	800418a <HAL_TIM_ConfigClockSource>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000f46:	f000 fa1f 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f4a:	2320      	movs	r3, #32
 8000f4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	4619      	mov	r1, r3
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <MX_TIM3_Init+0x94>)
 8000f58:	f003 fb3a 	bl	80045d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f62:	f000 fa11 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200018bc 	.word	0x200018bc
 8000f74:	40000400 	.word	0x40000400

08000f78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f94:	4b1d      	ldr	r3, [pc, #116]	; (800100c <MX_TIM4_Init+0x94>)
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <MX_TIM4_Init+0x98>)
 8000f98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_TIM4_Init+0x94>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_TIM4_Init+0x94>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1905;
 8000fa6:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_TIM4_Init+0x94>)
 8000fa8:	f240 7271 	movw	r2, #1905	; 0x771
 8000fac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_TIM4_Init+0x94>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_TIM4_Init+0x94>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fba:	4814      	ldr	r0, [pc, #80]	; (800100c <MX_TIM4_Init+0x94>)
 8000fbc:	f002 ff8e 	bl	8003edc <HAL_TIM_Base_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000fc6:	f000 f9df 	bl	8001388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	480d      	ldr	r0, [pc, #52]	; (800100c <MX_TIM4_Init+0x94>)
 8000fd8:	f003 f8d7 	bl	800418a <HAL_TIM_ConfigClockSource>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000fe2:	f000 f9d1 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fe6:	2320      	movs	r3, #32
 8000fe8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4806      	ldr	r0, [pc, #24]	; (800100c <MX_TIM4_Init+0x94>)
 8000ff4:	f003 faec 	bl	80045d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000ffe:	f000 f9c3 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20001830 	.word	0x20001830
 8001010:	40000800 	.word	0x40000800

08001014 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <MX_USART2_UART_Init+0x48>)
 800101a:	4a11      	ldr	r2, [pc, #68]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 800101c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_USART2_UART_Init+0x48>)
 8001020:	4a10      	ldr	r2, [pc, #64]	; (8001064 <MX_USART2_UART_Init+0x50>)
 8001022:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <MX_USART2_UART_Init+0x48>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_USART2_UART_Init+0x48>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <MX_USART2_UART_Init+0x48>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_USART2_UART_Init+0x48>)
 8001038:	220c      	movs	r2, #12
 800103a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <MX_USART2_UART_Init+0x48>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_USART2_UART_Init+0x48>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_USART2_UART_Init+0x48>)
 800104a:	f003 fb51 	bl	80046f0 <HAL_UART_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8001054:	f000 f998 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20001a10 	.word	0x20001a10
 8001060:	40004400 	.word	0x40004400
 8001064:	0007a120 	.word	0x0007a120

08001068 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_DMA_Init+0x78>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <MX_DMA_Init+0x78>)
 8001078:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_DMA_Init+0x78>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_DMA_Init+0x78>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <MX_DMA_Init+0x78>)
 8001094:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_DMA_Init+0x78>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2010      	movs	r0, #16
 80010ac:	f001 fa37 	bl	800251e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010b0:	2010      	movs	r0, #16
 80010b2:	f001 fa50 	bl	8002556 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	2011      	movs	r0, #17
 80010bc:	f001 fa2f 	bl	800251e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80010c0:	2011      	movs	r0, #17
 80010c2:	f001 fa48 	bl	8002556 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	203a      	movs	r0, #58	; 0x3a
 80010cc:	f001 fa27 	bl	800251e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010d0:	203a      	movs	r0, #58	; 0x3a
 80010d2:	f001 fa40 	bl	8002556 <HAL_NVIC_EnableIRQ>

}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800

080010e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b4a      	ldr	r3, [pc, #296]	; (8001228 <MX_GPIO_Init+0x144>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a49      	ldr	r2, [pc, #292]	; (8001228 <MX_GPIO_Init+0x144>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b47      	ldr	r3, [pc, #284]	; (8001228 <MX_GPIO_Init+0x144>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b43      	ldr	r3, [pc, #268]	; (8001228 <MX_GPIO_Init+0x144>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a42      	ldr	r2, [pc, #264]	; (8001228 <MX_GPIO_Init+0x144>)
 8001120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b40      	ldr	r3, [pc, #256]	; (8001228 <MX_GPIO_Init+0x144>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	4b3c      	ldr	r3, [pc, #240]	; (8001228 <MX_GPIO_Init+0x144>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a3b      	ldr	r2, [pc, #236]	; (8001228 <MX_GPIO_Init+0x144>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b39      	ldr	r3, [pc, #228]	; (8001228 <MX_GPIO_Init+0x144>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b35      	ldr	r3, [pc, #212]	; (8001228 <MX_GPIO_Init+0x144>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a34      	ldr	r2, [pc, #208]	; (8001228 <MX_GPIO_Init+0x144>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b32      	ldr	r3, [pc, #200]	; (8001228 <MX_GPIO_Init+0x144>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8001170:	482e      	ldr	r0, [pc, #184]	; (800122c <MX_GPIO_Init+0x148>)
 8001172:	f002 f985 	bl	8003480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	2130      	movs	r1, #48	; 0x30
 800117a:	482d      	ldr	r0, [pc, #180]	; (8001230 <MX_GPIO_Init+0x14c>)
 800117c:	f002 f980 	bl	8003480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001186:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <MX_GPIO_Init+0x150>)
 8001188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	4828      	ldr	r0, [pc, #160]	; (8001238 <MX_GPIO_Init+0x154>)
 8001196:	f001 ffc9 	bl	800312c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_10;
 800119a:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	481e      	ldr	r0, [pc, #120]	; (800122c <MX_GPIO_Init+0x148>)
 80011b4:	f001 ffba 	bl	800312c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80011b8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80011bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	4817      	ldr	r0, [pc, #92]	; (800122c <MX_GPIO_Init+0x148>)
 80011ce:	f001 ffad 	bl	800312c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011da:	2302      	movs	r3, #2
 80011dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	4814      	ldr	r0, [pc, #80]	; (8001238 <MX_GPIO_Init+0x154>)
 80011e6:	f001 ffa1 	bl	800312c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011ea:	2330      	movs	r3, #48	; 0x30
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	480b      	ldr	r0, [pc, #44]	; (8001230 <MX_GPIO_Init+0x14c>)
 8001202:	f001 ff93 	bl	800312c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001206:	2340      	movs	r3, #64	; 0x40
 8001208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800120e:	2302      	movs	r3, #2
 8001210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_GPIO_Init+0x14c>)
 800121a:	f001 ff87 	bl	800312c <HAL_GPIO_Init>

}
 800121e:	bf00      	nop
 8001220:	3728      	adds	r7, #40	; 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	40020000 	.word	0x40020000
 8001230:	40020400 	.word	0x40020400
 8001234:	10210000 	.word	0x10210000
 8001238:	40020800 	.word	0x40020800

0800123c <allLEDSoff>:

/* USER CODE BEGIN 4 */
void allLEDSoff() {
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0); //1
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001246:	480a      	ldr	r0, [pc, #40]	; (8001270 <allLEDSoff+0x34>)
 8001248:	f002 f91a 	bl	8003480 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0); //2
 800124c:	2200      	movs	r2, #0
 800124e:	2110      	movs	r1, #16
 8001250:	4808      	ldr	r0, [pc, #32]	; (8001274 <allLEDSoff+0x38>)
 8001252:	f002 f915 	bl	8003480 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); //3
 8001256:	2200      	movs	r2, #0
 8001258:	2120      	movs	r1, #32
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <allLEDSoff+0x38>)
 800125c:	f002 f910 	bl	8003480 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0); //REC
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001266:	4802      	ldr	r0, [pc, #8]	; (8001270 <allLEDSoff+0x34>)
 8001268:	f002 f90a 	bl	8003480 <HAL_GPIO_WritePin>
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40020000 	.word	0x40020000
 8001274:	40020400 	.word	0x40020400

08001278 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af02      	add	r7, sp, #8
 800127e:	6078      	str	r0, [r7, #4]
	if (button1) {
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00f      	beq.n	80012a8 <HAL_DAC_ConvCpltCallbackCh1+0x30>
		HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*) sine440, 1024, DAC_ALIGN_12B_R);
 8001288:	2300      	movs	r3, #0
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001290:	4a1c      	ldr	r2, [pc, #112]	; (8001304 <HAL_DAC_ConvCpltCallbackCh1+0x8c>)
 8001292:	2100      	movs	r1, #0
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f001 f99b 	bl	80025d0 <HAL_DAC_Start_DMA>
		wave_fillbuffer(sine440+512, 1, 512);
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <HAL_DAC_ConvCpltCallbackCh1+0x90>)
 800129c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a0:	2101      	movs	r1, #1
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f8b4 	bl	8001410 <wave_fillbuffer>
	}
	if (button2) {
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_DAC_ConvCpltCallbackCh1+0x94>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00f      	beq.n	80012d0 <HAL_DAC_ConvCpltCallbackCh1+0x58>
		HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*) sine523, 1024, DAC_ALIGN_12B_R);
 80012b0:	2300      	movs	r3, #0
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b8:	4a15      	ldr	r2, [pc, #84]	; (8001310 <HAL_DAC_ConvCpltCallbackCh1+0x98>)
 80012ba:	2100      	movs	r1, #0
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f001 f987 	bl	80025d0 <HAL_DAC_Start_DMA>
		wave_fillbuffer(sine523+512, 2, 512);
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <HAL_DAC_ConvCpltCallbackCh1+0x9c>)
 80012c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c8:	2102      	movs	r1, #2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f8a0 	bl	8001410 <wave_fillbuffer>
	}
	if (button3) {
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <HAL_DAC_ConvCpltCallbackCh1+0xa0>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00f      	beq.n	80012f8 <HAL_DAC_ConvCpltCallbackCh1+0x80>
		HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*) sinesum, 1024, DAC_ALIGN_12B_R);
 80012d8:	2300      	movs	r3, #0
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e0:	4a0e      	ldr	r2, [pc, #56]	; (800131c <HAL_DAC_ConvCpltCallbackCh1+0xa4>)
 80012e2:	2100      	movs	r1, #0
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f001 f973 	bl	80025d0 <HAL_DAC_Start_DMA>
		wave_fillbuffer(sinesum+512, 3, 512);
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <HAL_DAC_ConvCpltCallbackCh1+0xa8>)
 80012ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f0:	2103      	movs	r1, #3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f88c 	bl	8001410 <wave_fillbuffer>
	}
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000028 	.word	0x20000028
 8001304:	20000030 	.word	0x20000030
 8001308:	20000430 	.word	0x20000430
 800130c:	20000029 	.word	0x20000029
 8001310:	20000830 	.word	0x20000830
 8001314:	20000c30 	.word	0x20000c30
 8001318:	2000002a 	.word	0x2000002a
 800131c:	20001030 	.word	0x20001030
 8001320:	20001430 	.word	0x20001430

08001324 <HAL_DAC_ConvHalfCpltCallbackCh1>:
void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	if (button1) {
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_DAC_ConvHalfCpltCallbackCh1+0x4c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d005      	beq.n	8001340 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>
		wave_fillbuffer(sine440, 1, 512);
 8001334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001338:	2101      	movs	r1, #1
 800133a:	480e      	ldr	r0, [pc, #56]	; (8001374 <HAL_DAC_ConvHalfCpltCallbackCh1+0x50>)
 800133c:	f000 f868 	bl	8001410 <wave_fillbuffer>
	}
	if (button2) {
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_DAC_ConvHalfCpltCallbackCh1+0x54>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <HAL_DAC_ConvHalfCpltCallbackCh1+0x30>
		wave_fillbuffer(sine523, 2, 512);
 8001348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134c:	2102      	movs	r1, #2
 800134e:	480b      	ldr	r0, [pc, #44]	; (800137c <HAL_DAC_ConvHalfCpltCallbackCh1+0x58>)
 8001350:	f000 f85e 	bl	8001410 <wave_fillbuffer>
	}
	if (button3) {
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_DAC_ConvHalfCpltCallbackCh1+0x5c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d005      	beq.n	8001368 <HAL_DAC_ConvHalfCpltCallbackCh1+0x44>
		wave_fillbuffer(sinesum, 3, 512);
 800135c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001360:	2103      	movs	r1, #3
 8001362:	4808      	ldr	r0, [pc, #32]	; (8001384 <HAL_DAC_ConvHalfCpltCallbackCh1+0x60>)
 8001364:	f000 f854 	bl	8001410 <wave_fillbuffer>
	}
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000028 	.word	0x20000028
 8001374:	20000030 	.word	0x20000030
 8001378:	20000029 	.word	0x20000029
 800137c:	20000830 	.word	0x20000830
 8001380:	2000002a 	.word	0x2000002a
 8001384:	20001030 	.word	0x20001030

08001388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <wave_init>:
int16_t sintab[256];
uint16_t offset_440hz;
uint16_t offset_523hz;

void wave_init()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 256; i++)
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	e01e      	b.n	80013e2 <wave_init+0x4a>
		sintab[i] = (int) (930.0f * sinf(i * 0.02454369261f));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	ee07 3a90 	vmov	s15, r3
 80013aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ae:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80013fc <wave_init+0x64>
 80013b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ba:	f004 f80b 	bl	80053d4 <sinf>
 80013be:	eeb0 7a40 	vmov.f32	s14, s0
 80013c2:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001400 <wave_init+0x68>
 80013c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ce:	ee17 3a90 	vmov	r3, s15
 80013d2:	b219      	sxth	r1, r3
 80013d4:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <wave_init+0x6c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 256; i++)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3301      	adds	r3, #1
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2bff      	cmp	r3, #255	; 0xff
 80013e6:	dddd      	ble.n	80013a4 <wave_init+0xc>

	offset_440hz = 0;
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <wave_init+0x70>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	801a      	strh	r2, [r3, #0]
	offset_523hz = 0;
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <wave_init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	801a      	strh	r2, [r3, #0]
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	3cc90fdb 	.word	0x3cc90fdb
 8001400:	44688000 	.word	0x44688000
 8001404:	20001eb4 	.word	0x20001eb4
 8001408:	20001eb2 	.word	0x20001eb2
 800140c:	20001eb0 	.word	0x20001eb0

08001410 <wave_fillbuffer>:


void wave_fillbuffer(uint16_t* buffer, uint8_t type, uint16_t len)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	70fb      	strb	r3, [r7, #3]
 800141c:	4613      	mov	r3, r2
 800141e:	803b      	strh	r3, [r7, #0]
	for (int i = 0; i < len; i++)
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	e05e      	b.n	80014e4 <wave_fillbuffer+0xd4>
	{
		int16_t sample = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	817b      	strh	r3, [r7, #10]
		switch (type)
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d014      	beq.n	800145a <wave_fillbuffer+0x4a>
 8001430:	2b03      	cmp	r3, #3
 8001432:	d023      	beq.n	800147c <wave_fillbuffer+0x6c>
 8001434:	2b01      	cmp	r3, #1
 8001436:	d149      	bne.n	80014cc <wave_fillbuffer+0xbc>
		{
			case 1:
				sample = sintab[offset_440hz >> 8];
 8001438:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <wave_fillbuffer+0xe8>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	b29b      	uxth	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <wave_fillbuffer+0xec>)
 8001444:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001448:	817b      	strh	r3, [r7, #10]
				offset_440hz += 654;
 800144a:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <wave_fillbuffer+0xe8>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	f203 238e 	addw	r3, r3, #654	; 0x28e
 8001452:	b29a      	uxth	r2, r3
 8001454:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <wave_fillbuffer+0xe8>)
 8001456:	801a      	strh	r2, [r3, #0]
				break;
 8001458:	e038      	b.n	80014cc <wave_fillbuffer+0xbc>
			case 2:
				sample = sintab[offset_523hz >> 8];
 800145a:	4b29      	ldr	r3, [pc, #164]	; (8001500 <wave_fillbuffer+0xf0>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	0a1b      	lsrs	r3, r3, #8
 8001460:	b29b      	uxth	r3, r3
 8001462:	461a      	mov	r2, r3
 8001464:	4b25      	ldr	r3, [pc, #148]	; (80014fc <wave_fillbuffer+0xec>)
 8001466:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800146a:	817b      	strh	r3, [r7, #10]
				offset_523hz += 777;
 800146c:	4b24      	ldr	r3, [pc, #144]	; (8001500 <wave_fillbuffer+0xf0>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	f203 3309 	addw	r3, r3, #777	; 0x309
 8001474:	b29a      	uxth	r2, r3
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <wave_fillbuffer+0xf0>)
 8001478:	801a      	strh	r2, [r3, #0]
				break;
 800147a:	e027      	b.n	80014cc <wave_fillbuffer+0xbc>
			case 3:
				sample = (sintab[offset_440hz >> 8] >> 1) + (sintab[offset_523hz >> 8] >> 1);
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <wave_fillbuffer+0xe8>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	b29b      	uxth	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <wave_fillbuffer+0xec>)
 8001488:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800148c:	105b      	asrs	r3, r3, #1
 800148e:	b21b      	sxth	r3, r3
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <wave_fillbuffer+0xf0>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	4619      	mov	r1, r3
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <wave_fillbuffer+0xec>)
 800149e:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80014a2:	105b      	asrs	r3, r3, #1
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	4413      	add	r3, r2
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	817b      	strh	r3, [r7, #10]
				offset_440hz += 654;
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <wave_fillbuffer+0xe8>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	f203 238e 	addw	r3, r3, #654	; 0x28e
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <wave_fillbuffer+0xe8>)
 80014ba:	801a      	strh	r2, [r3, #0]
				offset_523hz += 777;
 80014bc:	4b10      	ldr	r3, [pc, #64]	; (8001500 <wave_fillbuffer+0xf0>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	f203 3309 	addw	r3, r3, #777	; 0x309
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <wave_fillbuffer+0xf0>)
 80014c8:	801a      	strh	r2, [r3, #0]
				break;
 80014ca:	bf00      	nop
		}
		buffer[i] = (uint16_t)(sample + 2048);
 80014cc:	897a      	ldrh	r2, [r7, #10]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	440b      	add	r3, r1
 80014d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014da:	b292      	uxth	r2, r2
 80014dc:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	3301      	adds	r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	883b      	ldrh	r3, [r7, #0]
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	db9c      	blt.n	8001426 <wave_fillbuffer+0x16>
	}
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	20001eb2 	.word	0x20001eb2
 80014fc:	20001eb4 	.word	0x20001eb4
 8001500:	20001eb0 	.word	0x20001eb0

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_MspInit+0x4c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <HAL_MspInit+0x4c>)
 8001514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001518:	6453      	str	r3, [r2, #68]	; 0x44
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_MspInit+0x4c>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a08      	ldr	r2, [pc, #32]	; (8001550 <HAL_MspInit+0x4c>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_MspInit+0x4c>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001542:	2007      	movs	r0, #7
 8001544:	f000 ffe0 	bl	8002508 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40023800 	.word	0x40023800

08001554 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a2e      	ldr	r2, [pc, #184]	; (800162c <HAL_ADC_MspInit+0xd8>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d156      	bne.n	8001624 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <HAL_ADC_MspInit+0xdc>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4a2c      	ldr	r2, [pc, #176]	; (8001630 <HAL_ADC_MspInit+0xdc>)
 8001580:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001584:	6453      	str	r3, [r2, #68]	; 0x44
 8001586:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <HAL_ADC_MspInit+0xdc>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b26      	ldr	r3, [pc, #152]	; (8001630 <HAL_ADC_MspInit+0xdc>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a25      	ldr	r2, [pc, #148]	; (8001630 <HAL_ADC_MspInit+0xdc>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b23      	ldr	r3, [pc, #140]	; (8001630 <HAL_ADC_MspInit+0xdc>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PC4     ------> ADC2_IN14 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015ae:	2310      	movs	r3, #16
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b2:	2303      	movs	r3, #3
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	481c      	ldr	r0, [pc, #112]	; (8001634 <HAL_ADC_MspInit+0xe0>)
 80015c2:	f001 fdb3 	bl	800312c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <HAL_ADC_MspInit+0xe4>)
 80015c8:	4a1c      	ldr	r2, [pc, #112]	; (800163c <HAL_ADC_MspInit+0xe8>)
 80015ca:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <HAL_ADC_MspInit+0xe4>)
 80015ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015d2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015d4:	4b18      	ldr	r3, [pc, #96]	; (8001638 <HAL_ADC_MspInit+0xe4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <HAL_ADC_MspInit+0xe4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80015e0:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_ADC_MspInit+0xe4>)
 80015e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <HAL_ADC_MspInit+0xe4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_ADC_MspInit+0xe4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80015f4:	4b10      	ldr	r3, [pc, #64]	; (8001638 <HAL_ADC_MspInit+0xe4>)
 80015f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015fa:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_ADC_MspInit+0xe4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HAL_ADC_MspInit+0xe4>)
 8001604:	2200      	movs	r2, #0
 8001606:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001608:	480b      	ldr	r0, [pc, #44]	; (8001638 <HAL_ADC_MspInit+0xe4>)
 800160a:	f001 f9b1 	bl	8002970 <HAL_DMA_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001614:	f7ff feb8 	bl	8001388 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_ADC_MspInit+0xe4>)
 800161c:	639a      	str	r2, [r3, #56]	; 0x38
 800161e:	4a06      	ldr	r2, [pc, #24]	; (8001638 <HAL_ADC_MspInit+0xe4>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001624:	bf00      	nop
 8001626:	3728      	adds	r7, #40	; 0x28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40012100 	.word	0x40012100
 8001630:	40023800 	.word	0x40023800
 8001634:	40020800 	.word	0x40020800
 8001638:	20001a50 	.word	0x20001a50
 800163c:	40026440 	.word	0x40026440

08001640 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a2f      	ldr	r2, [pc, #188]	; (800171c <HAL_DAC_MspInit+0xdc>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d157      	bne.n	8001712 <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <HAL_DAC_MspInit+0xe0>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a2d      	ldr	r2, [pc, #180]	; (8001720 <HAL_DAC_MspInit+0xe0>)
 800166c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <HAL_DAC_MspInit+0xe0>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b27      	ldr	r3, [pc, #156]	; (8001720 <HAL_DAC_MspInit+0xe0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a26      	ldr	r2, [pc, #152]	; (8001720 <HAL_DAC_MspInit+0xe0>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b24      	ldr	r3, [pc, #144]	; (8001720 <HAL_DAC_MspInit+0xe0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800169a:	2310      	movs	r3, #16
 800169c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800169e:	2303      	movs	r3, #3
 80016a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	481d      	ldr	r0, [pc, #116]	; (8001724 <HAL_DAC_MspInit+0xe4>)
 80016ae:	f001 fd3d 	bl	800312c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <HAL_DAC_MspInit+0xe8>)
 80016b4:	4a1d      	ldr	r2, [pc, #116]	; (800172c <HAL_DAC_MspInit+0xec>)
 80016b6:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_DAC_MspInit+0xe8>)
 80016ba:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80016be:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_DAC_MspInit+0xe8>)
 80016c2:	2240      	movs	r2, #64	; 0x40
 80016c4:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <HAL_DAC_MspInit+0xe8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_DAC_MspInit+0xe8>)
 80016ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d2:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_DAC_MspInit+0xe8>)
 80016d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016da:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_DAC_MspInit+0xe8>)
 80016de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016e2:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 80016e4:	4b10      	ldr	r3, [pc, #64]	; (8001728 <HAL_DAC_MspInit+0xe8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_DAC_MspInit+0xe8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <HAL_DAC_MspInit+0xe8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80016f6:	480c      	ldr	r0, [pc, #48]	; (8001728 <HAL_DAC_MspInit+0xe8>)
 80016f8:	f001 f93a 	bl	8002970 <HAL_DMA_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 8001702:	f7ff fe41 	bl	8001388 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a07      	ldr	r2, [pc, #28]	; (8001728 <HAL_DAC_MspInit+0xe8>)
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	4a06      	ldr	r2, [pc, #24]	; (8001728 <HAL_DAC_MspInit+0xe8>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	; 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40007400 	.word	0x40007400
 8001720:	40023800 	.word	0x40023800
 8001724:	40020000 	.word	0x40020000
 8001728:	200018fc 	.word	0x200018fc
 800172c:	40026088 	.word	0x40026088

08001730 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001740:	d116      	bne.n	8001770 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <HAL_TIM_Base_MspInit+0x98>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a1f      	ldr	r2, [pc, #124]	; (80017c8 <HAL_TIM_Base_MspInit+0x98>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_TIM_Base_MspInit+0x98>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	201c      	movs	r0, #28
 8001764:	f000 fedb 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001768:	201c      	movs	r0, #28
 800176a:	f000 fef4 	bl	8002556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800176e:	e026      	b.n	80017be <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a15      	ldr	r2, [pc, #84]	; (80017cc <HAL_TIM_Base_MspInit+0x9c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d10e      	bne.n	8001798 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_TIM_Base_MspInit+0x98>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	4a11      	ldr	r2, [pc, #68]	; (80017c8 <HAL_TIM_Base_MspInit+0x98>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	6413      	str	r3, [r2, #64]	; 0x40
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_TIM_Base_MspInit+0x98>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
}
 8001796:	e012      	b.n	80017be <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <HAL_TIM_Base_MspInit+0xa0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d10d      	bne.n	80017be <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_TIM_Base_MspInit+0x98>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <HAL_TIM_Base_MspInit+0x98>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_TIM_Base_MspInit+0x98>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
}
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40000400 	.word	0x40000400
 80017d0:	40000800 	.word	0x40000800

080017d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a30      	ldr	r2, [pc, #192]	; (80018b4 <HAL_UART_MspInit+0xe0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d159      	bne.n	80018aa <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <HAL_UART_MspInit+0xe4>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a2e      	ldr	r2, [pc, #184]	; (80018b8 <HAL_UART_MspInit+0xe4>)
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <HAL_UART_MspInit+0xe4>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <HAL_UART_MspInit+0xe4>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a27      	ldr	r2, [pc, #156]	; (80018b8 <HAL_UART_MspInit+0xe4>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <HAL_UART_MspInit+0xe4>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800182e:	230c      	movs	r3, #12
 8001830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183a:	2303      	movs	r3, #3
 800183c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800183e:	2307      	movs	r3, #7
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	481c      	ldr	r0, [pc, #112]	; (80018bc <HAL_UART_MspInit+0xe8>)
 800184a:	f001 fc6f 	bl	800312c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <HAL_UART_MspInit+0xec>)
 8001850:	4a1c      	ldr	r2, [pc, #112]	; (80018c4 <HAL_UART_MspInit+0xf0>)
 8001852:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <HAL_UART_MspInit+0xec>)
 8001856:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800185a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <HAL_UART_MspInit+0xec>)
 800185e:	2240      	movs	r2, #64	; 0x40
 8001860:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <HAL_UART_MspInit+0xec>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <HAL_UART_MspInit+0xec>)
 800186a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800186e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <HAL_UART_MspInit+0xec>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_UART_MspInit+0xec>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <HAL_UART_MspInit+0xec>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <HAL_UART_MspInit+0xec>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <HAL_UART_MspInit+0xec>)
 800188a:	2200      	movs	r2, #0
 800188c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800188e:	480c      	ldr	r0, [pc, #48]	; (80018c0 <HAL_UART_MspInit+0xec>)
 8001890:	f001 f86e 	bl	8002970 <HAL_DMA_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800189a:	f7ff fd75 	bl	8001388 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <HAL_UART_MspInit+0xec>)
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
 80018a4:	4a06      	ldr	r2, [pc, #24]	; (80018c0 <HAL_UART_MspInit+0xec>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018aa:	bf00      	nop
 80018ac:	3728      	adds	r7, #40	; 0x28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40004400 	.word	0x40004400
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020000 	.word	0x40020000
 80018c0:	2000195c 	.word	0x2000195c
 80018c4:	400260a0 	.word	0x400260a0

080018c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <HardFault_Handler+0x4>

080018dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <MemManage_Handler+0x4>

080018e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <BusFault_Handler+0x4>

080018e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <UsageFault_Handler+0x4>

080018ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800191c:	f000 f8ca 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}

08001924 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <DMA1_Stream5_IRQHandler+0x10>)
 800192a:	f001 f997 	bl	8002c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200018fc 	.word	0x200018fc

08001938 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <DMA1_Stream6_IRQHandler+0x10>)
 800193e:	f001 f98d 	bl	8002c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	2000195c 	.word	0x2000195c

0800194c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001950:	4808      	ldr	r0, [pc, #32]	; (8001974 <TIM2_IRQHandler+0x28>)
 8001952:	f002 fb12 	bl	8003f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if (toggle) toggle = 0;
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <TIM2_IRQHandler+0x2c>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <TIM2_IRQHandler+0x1c>
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <TIM2_IRQHandler+0x2c>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
  else toggle = 1;
  /* USER CODE END TIM2_IRQn 1 */
}
 8001966:	e002      	b.n	800196e <TIM2_IRQHandler+0x22>
  else toggle = 1;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <TIM2_IRQHandler+0x2c>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200019d0 	.word	0x200019d0
 8001978:	200020b4 	.word	0x200020b4

0800197c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <DMA2_Stream2_IRQHandler+0x10>)
 8001982:	f001 f96b 	bl	8002c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20001a50 	.word	0x20001a50

08001990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <SystemInit+0x28>)
 8001996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199a:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <SystemInit+0x28>)
 800199c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <SystemInit+0x28>)
 80019a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019aa:	609a      	str	r2, [r3, #8]
#endif
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019c2:	e003      	b.n	80019cc <LoopCopyDataInit>

080019c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019ca:	3104      	adds	r1, #4

080019cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019cc:	480b      	ldr	r0, [pc, #44]	; (80019fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019d4:	d3f6      	bcc.n	80019c4 <CopyDataInit>
  ldr  r2, =_sbss
 80019d6:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019d8:	e002      	b.n	80019e0 <LoopFillZerobss>

080019da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019dc:	f842 3b04 	str.w	r3, [r2], #4

080019e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019e4:	d3f9      	bcc.n	80019da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019e6:	f7ff ffd3 	bl	8001990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ea:	f003 fcc7 	bl	800537c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ee:	f7fe fdb7 	bl	8000560 <main>
  bx  lr    
 80019f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019f8:	080062b4 	.word	0x080062b4
  ldr  r0, =_sdata
 80019fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a00:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001a04:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001a08:	200020bc 	.word	0x200020bc

08001a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC_IRQHandler>
	...

08001a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <HAL_Init+0x40>)
 8001a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <HAL_Init+0x40>)
 8001a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_Init+0x40>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_Init+0x40>)
 8001a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 fd65 	bl	8002508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f000 f808 	bl	8001a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7ff fd5e 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023c00 	.word	0x40023c00

08001a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_InitTick+0x54>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_InitTick+0x58>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fd7d 	bl	8002572 <HAL_SYSTICK_Config>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00e      	b.n	8001aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d80a      	bhi.n	8001a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f000 fd45 	bl	800251e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <HAL_InitTick+0x5c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_IncTick+0x20>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_IncTick+0x24>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <HAL_IncTick+0x24>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	200020b8 	.word	0x200020b8

08001adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <HAL_GetTick+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	200020b8 	.word	0x200020b8

08001af4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e033      	b.n	8001b72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d109      	bne.n	8001b26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fd1e 	bl	8001554 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d118      	bne.n	8001b64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b3a:	f023 0302 	bic.w	r3, r3, #2
 8001b3e:	f043 0202 	orr.w	r2, r3, #2
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 fa90 	bl	800206c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f023 0303 	bic.w	r3, r3, #3
 8001b5a:	f043 0201 	orr.w	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
 8001b62:	e001      	b.n	8001b68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_ADC_Start_DMA+0x1e>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e0cc      	b.n	8001d34 <HAL_ADC_Start_DMA+0x1b8>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d018      	beq.n	8001be2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bc0:	4b5e      	ldr	r3, [pc, #376]	; (8001d3c <HAL_ADC_Start_DMA+0x1c0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a5e      	ldr	r2, [pc, #376]	; (8001d40 <HAL_ADC_Start_DMA+0x1c4>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	0c9a      	lsrs	r2, r3, #18
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001bd4:	e002      	b.n	8001bdc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f9      	bne.n	8001bd6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	f040 80a0 	bne.w	8001d32 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bfa:	f023 0301 	bic.w	r3, r3, #1
 8001bfe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d007      	beq.n	8001c24 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c30:	d106      	bne.n	8001c40 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	f023 0206 	bic.w	r2, r3, #6
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	645a      	str	r2, [r3, #68]	; 0x44
 8001c3e:	e002      	b.n	8001c46 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c4e:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <HAL_ADC_Start_DMA+0x1c8>)
 8001c50:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c56:	4a3c      	ldr	r2, [pc, #240]	; (8001d48 <HAL_ADC_Start_DMA+0x1cc>)
 8001c58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5e:	4a3b      	ldr	r2, [pc, #236]	; (8001d4c <HAL_ADC_Start_DMA+0x1d0>)
 8001c60:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c66:	4a3a      	ldr	r2, [pc, #232]	; (8001d50 <HAL_ADC_Start_DMA+0x1d4>)
 8001c68:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c72:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c82:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c92:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	334c      	adds	r3, #76	; 0x4c
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f000 ff12 	bl	8002acc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d12a      	bne.n	8001d0a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a26      	ldr	r2, [pc, #152]	; (8001d54 <HAL_ADC_Start_DMA+0x1d8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d015      	beq.n	8001cea <HAL_ADC_Start_DMA+0x16e>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a25      	ldr	r2, [pc, #148]	; (8001d58 <HAL_ADC_Start_DMA+0x1dc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d105      	bne.n	8001cd4 <HAL_ADC_Start_DMA+0x158>
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <HAL_ADC_Start_DMA+0x1c8>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00a      	beq.n	8001cea <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a20      	ldr	r2, [pc, #128]	; (8001d5c <HAL_ADC_Start_DMA+0x1e0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d129      	bne.n	8001d32 <HAL_ADC_Start_DMA+0x1b6>
 8001cde:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_ADC_Start_DMA+0x1c8>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	2b0f      	cmp	r3, #15
 8001ce8:	d823      	bhi.n	8001d32 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d11c      	bne.n	8001d32 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	e013      	b.n	8001d32 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a11      	ldr	r2, [pc, #68]	; (8001d54 <HAL_ADC_Start_DMA+0x1d8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d10e      	bne.n	8001d32 <HAL_ADC_Start_DMA+0x1b6>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d107      	bne.n	8001d32 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d30:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	431bde83 	.word	0x431bde83
 8001d44:	40012300 	.word	0x40012300
 8001d48:	08002265 	.word	0x08002265
 8001d4c:	0800231f 	.word	0x0800231f
 8001d50:	0800233b 	.word	0x0800233b
 8001d54:	40012000 	.word	0x40012000
 8001d58:	40012100 	.word	0x40012100
 8001d5c:	40012200 	.word	0x40012200

08001d60 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_ADC_Stop_DMA+0x1a>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e038      	b.n	8001dec <HAL_ADC_Stop_DMA+0x8c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0201 	bic.w	r2, r2, #1
 8001d90:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d120      	bne.n	8001de2 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dae:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fee1 	bl	8002b7c <HAL_DMA_Abort>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001dcc:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	f043 0201 	orr.w	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x1c>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e113      	b.n	800204c <HAL_ADC_ConfigChannel+0x244>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b09      	cmp	r3, #9
 8001e32:	d925      	bls.n	8001e80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68d9      	ldr	r1, [r3, #12]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	3b1e      	subs	r3, #30
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43da      	mvns	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	400a      	ands	r2, r1
 8001e58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68d9      	ldr	r1, [r3, #12]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4403      	add	r3, r0
 8001e72:	3b1e      	subs	r3, #30
 8001e74:	409a      	lsls	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	e022      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6919      	ldr	r1, [r3, #16]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	2207      	movs	r2, #7
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6919      	ldr	r1, [r3, #16]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4403      	add	r3, r0
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	d824      	bhi.n	8001f18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	3b05      	subs	r3, #5
 8001ee0:	221f      	movs	r2, #31
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	400a      	ands	r2, r1
 8001eee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	4618      	mov	r0, r3
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	3b05      	subs	r3, #5
 8001f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	635a      	str	r2, [r3, #52]	; 0x34
 8001f16:	e04c      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b0c      	cmp	r3, #12
 8001f1e:	d824      	bhi.n	8001f6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	3b23      	subs	r3, #35	; 0x23
 8001f32:	221f      	movs	r2, #31
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43da      	mvns	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	400a      	ands	r2, r1
 8001f40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	3b23      	subs	r3, #35	; 0x23
 8001f5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
 8001f68:	e023      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	3b41      	subs	r3, #65	; 0x41
 8001f7c:	221f      	movs	r2, #31
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43da      	mvns	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	400a      	ands	r2, r1
 8001f8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	4618      	mov	r0, r3
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3b41      	subs	r3, #65	; 0x41
 8001fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fb2:	4b29      	ldr	r3, [pc, #164]	; (8002058 <HAL_ADC_ConfigChannel+0x250>)
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a28      	ldr	r2, [pc, #160]	; (800205c <HAL_ADC_ConfigChannel+0x254>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d10f      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x1d8>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b12      	cmp	r3, #18
 8001fc6:	d10b      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1d      	ldr	r2, [pc, #116]	; (800205c <HAL_ADC_ConfigChannel+0x254>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d12b      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x23a>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1c      	ldr	r2, [pc, #112]	; (8002060 <HAL_ADC_ConfigChannel+0x258>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d003      	beq.n	8001ffc <HAL_ADC_ConfigChannel+0x1f4>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b11      	cmp	r3, #17
 8001ffa:	d122      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a11      	ldr	r2, [pc, #68]	; (8002060 <HAL_ADC_ConfigChannel+0x258>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d111      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_ADC_ConfigChannel+0x25c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a11      	ldr	r2, [pc, #68]	; (8002068 <HAL_ADC_ConfigChannel+0x260>)
 8002024:	fba2 2303 	umull	r2, r3, r2, r3
 8002028:	0c9a      	lsrs	r2, r3, #18
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002034:	e002      	b.n	800203c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	3b01      	subs	r3, #1
 800203a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f9      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	40012300 	.word	0x40012300
 800205c:	40012000 	.word	0x40012000
 8002060:	10000012 	.word	0x10000012
 8002064:	20000000 	.word	0x20000000
 8002068:	431bde83 	.word	0x431bde83

0800206c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002074:	4b79      	ldr	r3, [pc, #484]	; (800225c <ADC_Init+0x1f0>)
 8002076:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	431a      	orrs	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	021a      	lsls	r2, r3, #8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6899      	ldr	r1, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	4a58      	ldr	r2, [pc, #352]	; (8002260 <ADC_Init+0x1f4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d022      	beq.n	800214a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002112:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6899      	ldr	r1, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002134:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6899      	ldr	r1, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	e00f      	b.n	800216a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002168:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0202 	bic.w	r2, r2, #2
 8002178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6899      	ldr	r1, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7e1b      	ldrb	r3, [r3, #24]
 8002184:	005a      	lsls	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d01b      	beq.n	80021d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6859      	ldr	r1, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	3b01      	subs	r3, #1
 80021c4:	035a      	lsls	r2, r3, #13
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	e007      	b.n	80021e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	051a      	lsls	r2, r3, #20
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002214:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6899      	ldr	r1, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002222:	025a      	lsls	r2, r3, #9
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800223a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6899      	ldr	r1, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	029a      	lsls	r2, r3, #10
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	609a      	str	r2, [r3, #8]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40012300 	.word	0x40012300
 8002260:	0f000001 	.word	0x0f000001

08002264 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002270:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800227a:	2b00      	cmp	r3, #0
 800227c:	d13c      	bne.n	80022f8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d12b      	bne.n	80022f0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800229c:	2b00      	cmp	r3, #0
 800229e:	d127      	bne.n	80022f0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d006      	beq.n	80022bc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d119      	bne.n	80022f0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0220 	bic.w	r2, r2, #32
 80022ca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d105      	bne.n	80022f0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f043 0201 	orr.w	r2, r3, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f7fe f907 	bl	8000504 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022f6:	e00e      	b.n	8002316 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f7ff fd75 	bl	8001df4 <HAL_ADC_ErrorCallback>
}
 800230a:	e004      	b.n	8002316 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	4798      	blx	r3
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7fe f901 	bl	8000534 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2240      	movs	r2, #64	; 0x40
 800234c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f043 0204 	orr.w	r2, r3, #4
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f7ff fd4a 	bl	8001df4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <__NVIC_SetPriorityGrouping+0x44>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002384:	4013      	ands	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239a:	4a04      	ldr	r2, [pc, #16]	; (80023ac <__NVIC_SetPriorityGrouping+0x44>)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	60d3      	str	r3, [r2, #12]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <__NVIC_GetPriorityGrouping+0x18>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	0a1b      	lsrs	r3, r3, #8
 80023ba:	f003 0307 	and.w	r3, r3, #7
}
 80023be:	4618      	mov	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	db0b      	blt.n	80023f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	f003 021f 	and.w	r2, r3, #31
 80023e4:	4907      	ldr	r1, [pc, #28]	; (8002404 <__NVIC_EnableIRQ+0x38>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	2001      	movs	r0, #1
 80023ee:	fa00 f202 	lsl.w	r2, r0, r2
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000e100 	.word	0xe000e100

08002408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	6039      	str	r1, [r7, #0]
 8002412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002418:	2b00      	cmp	r3, #0
 800241a:	db0a      	blt.n	8002432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	b2da      	uxtb	r2, r3
 8002420:	490c      	ldr	r1, [pc, #48]	; (8002454 <__NVIC_SetPriority+0x4c>)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	0112      	lsls	r2, r2, #4
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	440b      	add	r3, r1
 800242c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002430:	e00a      	b.n	8002448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4908      	ldr	r1, [pc, #32]	; (8002458 <__NVIC_SetPriority+0x50>)
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	3b04      	subs	r3, #4
 8002440:	0112      	lsls	r2, r2, #4
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	440b      	add	r3, r1
 8002446:	761a      	strb	r2, [r3, #24]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000e100 	.word	0xe000e100
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	; 0x24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f1c3 0307 	rsb	r3, r3, #7
 8002476:	2b04      	cmp	r3, #4
 8002478:	bf28      	it	cs
 800247a:	2304      	movcs	r3, #4
 800247c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3304      	adds	r3, #4
 8002482:	2b06      	cmp	r3, #6
 8002484:	d902      	bls.n	800248c <NVIC_EncodePriority+0x30>
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3b03      	subs	r3, #3
 800248a:	e000      	b.n	800248e <NVIC_EncodePriority+0x32>
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	f04f 32ff 	mov.w	r2, #4294967295
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43da      	mvns	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	401a      	ands	r2, r3
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a4:	f04f 31ff 	mov.w	r1, #4294967295
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	fa01 f303 	lsl.w	r3, r1, r3
 80024ae:	43d9      	mvns	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	4313      	orrs	r3, r2
         );
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3724      	adds	r7, #36	; 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d4:	d301      	bcc.n	80024da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d6:	2301      	movs	r3, #1
 80024d8:	e00f      	b.n	80024fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024da:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <SysTick_Config+0x40>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e2:	210f      	movs	r1, #15
 80024e4:	f04f 30ff 	mov.w	r0, #4294967295
 80024e8:	f7ff ff8e 	bl	8002408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <SysTick_Config+0x40>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <SysTick_Config+0x40>)
 80024f4:	2207      	movs	r2, #7
 80024f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	e000e010 	.word	0xe000e010

08002508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff ff29 	bl	8002368 <__NVIC_SetPriorityGrouping>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002530:	f7ff ff3e 	bl	80023b0 <__NVIC_GetPriorityGrouping>
 8002534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	6978      	ldr	r0, [r7, #20]
 800253c:	f7ff ff8e 	bl	800245c <NVIC_EncodePriority>
 8002540:	4602      	mov	r2, r0
 8002542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff5d 	bl	8002408 <__NVIC_SetPriority>
}
 800254e:	bf00      	nop
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff31 	bl	80023cc <__NVIC_EnableIRQ>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ffa2 	bl	80024c4 <SysTick_Config>
 8002580:	4603      	mov	r3, r0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e014      	b.n	80025c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	791b      	ldrb	r3, [r3, #4]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d105      	bne.n	80025b2 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff f847 	bl	8001640 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2202      	movs	r2, #2
 80025b6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	795b      	ldrb	r3, [r3, #5]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_DAC_Start_DMA+0x1e>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e08e      	b.n	800270c <HAL_DAC_Start_DMA+0x13c>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2202      	movs	r2, #2
 80025f8:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d12a      	bne.n	8002656 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	4a43      	ldr	r2, [pc, #268]	; (8002714 <HAL_DAC_Start_DMA+0x144>)
 8002606:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4a42      	ldr	r2, [pc, #264]	; (8002718 <HAL_DAC_Start_DMA+0x148>)
 800260e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4a41      	ldr	r2, [pc, #260]	; (800271c <HAL_DAC_Start_DMA+0x14c>)
 8002616:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002626:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	2b04      	cmp	r3, #4
 800262c:	d009      	beq.n	8002642 <HAL_DAC_Start_DMA+0x72>
 800262e:	2b08      	cmp	r3, #8
 8002630:	d00c      	beq.n	800264c <HAL_DAC_Start_DMA+0x7c>
 8002632:	2b00      	cmp	r3, #0
 8002634:	d000      	beq.n	8002638 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002636:	e039      	b.n	80026ac <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	3308      	adds	r3, #8
 800263e:	617b      	str	r3, [r7, #20]
        break;
 8002640:	e034      	b.n	80026ac <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	330c      	adds	r3, #12
 8002648:	617b      	str	r3, [r7, #20]
        break;
 800264a:	e02f      	b.n	80026ac <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3310      	adds	r3, #16
 8002652:	617b      	str	r3, [r7, #20]
        break;
 8002654:	e02a      	b.n	80026ac <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	4a31      	ldr	r2, [pc, #196]	; (8002720 <HAL_DAC_Start_DMA+0x150>)
 800265c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	4a30      	ldr	r2, [pc, #192]	; (8002724 <HAL_DAC_Start_DMA+0x154>)
 8002664:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	4a2f      	ldr	r2, [pc, #188]	; (8002728 <HAL_DAC_Start_DMA+0x158>)
 800266c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800267c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	2b04      	cmp	r3, #4
 8002682:	d009      	beq.n	8002698 <HAL_DAC_Start_DMA+0xc8>
 8002684:	2b08      	cmp	r3, #8
 8002686:	d00c      	beq.n	80026a2 <HAL_DAC_Start_DMA+0xd2>
 8002688:	2b00      	cmp	r3, #0
 800268a:	d000      	beq.n	800268e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800268c:	e00e      	b.n	80026ac <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	3314      	adds	r3, #20
 8002694:	617b      	str	r3, [r7, #20]
        break;
 8002696:	e009      	b.n	80026ac <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	3318      	adds	r3, #24
 800269e:	617b      	str	r3, [r7, #20]
        break;
 80026a0:	e004      	b.n	80026ac <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	331c      	adds	r3, #28
 80026a8:	617b      	str	r3, [r7, #20]
        break;
 80026aa:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10f      	bne.n	80026d2 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026c0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6898      	ldr	r0, [r3, #8]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	f000 f9fe 	bl	8002acc <HAL_DMA_Start_IT>
 80026d0:	e00e      	b.n	80026f0 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80026e0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	68d8      	ldr	r0, [r3, #12]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	f000 f9ee 	bl	8002acc <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6819      	ldr	r1, [r3, #0]
 80026f6:	2201      	movs	r2, #1
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	409a      	lsls	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	0800285d 	.word	0x0800285d
 8002718:	0800287f 	.word	0x0800287f
 800271c:	0800289b 	.word	0x0800289b
 8002720:	08002905 	.word	0x08002905
 8002724:	08002927 	.word	0x08002927
 8002728:	08002943 	.word	0x08002943

0800272c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6819      	ldr	r1, [r3, #0]
 8002740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	400a      	ands	r2, r1
 8002752:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	2201      	movs	r2, #1
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43da      	mvns	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	400a      	ands	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d107      	bne.n	8002782 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4618      	mov	r0, r3
 8002778:	f000 fa00 	bl	8002b7c <HAL_DMA_Abort>
 800277c:	4603      	mov	r3, r0
 800277e:	73fb      	strb	r3, [r7, #15]
 8002780:	e006      	b.n	8002790 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f9f8 	bl	8002b7c <HAL_DMA_Abort>
 800278c:	4603      	mov	r3, r0
 800278e:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2204      	movs	r2, #4
 800279a:	711a      	strb	r2, [r3, #4]
 800279c:	e002      	b.n	80027a4 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b087      	sub	sp, #28
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	795b      	ldrb	r3, [r3, #5]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_DAC_ConfigChannel+0x20>
 80027de:	2302      	movs	r3, #2
 80027e0:	e036      	b.n	8002850 <HAL_DAC_ConfigChannel+0x8e>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2202      	movs	r2, #2
 80027ec:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80027f6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4013      	ands	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6819      	ldr	r1, [r3, #0]
 8002830:	22c0      	movs	r2, #192	; 0xc0
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43da      	mvns	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	400a      	ands	r2, r1
 8002840:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f7fe fd04 	bl	8001278 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	711a      	strb	r2, [r3, #4]
}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288a:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f7fe fd49 	bl	8001324 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a6:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f043 0204 	orr.w	r2, r3, #4
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f7ff ff7a 	bl	80027ae <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	711a      	strb	r2, [r3, #4]
}
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f7ff ffd8 	bl	80028c8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	711a      	strb	r2, [r3, #4]
}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002932:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f7ff ffd1 	bl	80028dc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294e:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f043 0204 	orr.w	r2, r3, #4
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f7ff ffc7 	bl	80028f0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	711a      	strb	r2, [r3, #4]
}
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800297c:	f7ff f8ae 	bl	8001adc <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e099      	b.n	8002ac0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ac:	e00f      	b.n	80029ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ae:	f7ff f895 	bl	8001adc <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b05      	cmp	r3, #5
 80029ba:	d908      	bls.n	80029ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2203      	movs	r2, #3
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e078      	b.n	8002ac0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1e8      	bne.n	80029ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	4b38      	ldr	r3, [pc, #224]	; (8002ac8 <HAL_DMA_Init+0x158>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d107      	bne.n	8002a38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	4313      	orrs	r3, r2
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f023 0307 	bic.w	r3, r3, #7
 8002a4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d117      	bne.n	8002a92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00e      	beq.n	8002a92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 fadf 	bl	8003038 <DMA_CheckFifoParam>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2240      	movs	r2, #64	; 0x40
 8002a84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e016      	b.n	8002ac0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fa96 	bl	8002fcc <DMA_CalcBaseAndBitshift>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa8:	223f      	movs	r2, #63	; 0x3f
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	f010803f 	.word	0xf010803f

08002acc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_DMA_Start_IT+0x26>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e040      	b.n	8002b74 <HAL_DMA_Start_IT+0xa8>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d12f      	bne.n	8002b66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2202      	movs	r2, #2
 8002b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 fa28 	bl	8002f70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	223f      	movs	r2, #63	; 0x3f
 8002b26:	409a      	lsls	r2, r3
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0216 	orr.w	r2, r2, #22
 8002b3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d007      	beq.n	8002b54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0208 	orr.w	r2, r2, #8
 8002b52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	e005      	b.n	8002b72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b8a:	f7fe ffa7 	bl	8001adc <HAL_GetTick>
 8002b8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d008      	beq.n	8002bae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2280      	movs	r2, #128	; 0x80
 8002ba0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e052      	b.n	8002c54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0216 	bic.w	r2, r2, #22
 8002bbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bcc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d103      	bne.n	8002bde <HAL_DMA_Abort+0x62>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0208 	bic.w	r2, r2, #8
 8002bec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0201 	bic.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bfe:	e013      	b.n	8002c28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c00:	f7fe ff6c 	bl	8001adc <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b05      	cmp	r3, #5
 8002c0c:	d90c      	bls.n	8002c28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2220      	movs	r2, #32
 8002c12:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2203      	movs	r2, #3
 8002c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e015      	b.n	8002c54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1e4      	bne.n	8002c00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3a:	223f      	movs	r2, #63	; 0x3f
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c68:	4b92      	ldr	r3, [pc, #584]	; (8002eb4 <HAL_DMA_IRQHandler+0x258>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a92      	ldr	r2, [pc, #584]	; (8002eb8 <HAL_DMA_IRQHandler+0x25c>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	0a9b      	lsrs	r3, r3, #10
 8002c74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c86:	2208      	movs	r2, #8
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01a      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0204 	bic.w	r2, r2, #4
 8002cae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc0:	f043 0201 	orr.w	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ccc:	2201      	movs	r2, #1
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d012      	beq.n	8002cfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	2201      	movs	r2, #1
 8002cec:	409a      	lsls	r2, r3
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf6:	f043 0202 	orr.w	r2, r3, #2
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d02:	2204      	movs	r2, #4
 8002d04:	409a      	lsls	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d012      	beq.n	8002d34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00b      	beq.n	8002d34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d20:	2204      	movs	r2, #4
 8002d22:	409a      	lsls	r2, r3
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2c:	f043 0204 	orr.w	r2, r3, #4
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	2210      	movs	r2, #16
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d043      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d03c      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d56:	2210      	movs	r2, #16
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d018      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d108      	bne.n	8002d8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d024      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	4798      	blx	r3
 8002d8a:	e01f      	b.n	8002dcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01b      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	4798      	blx	r3
 8002d9c:	e016      	b.n	8002dcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d107      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0208 	bic.w	r2, r2, #8
 8002dba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 808e 	beq.w	8002efa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 8086 	beq.w	8002efa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df2:	2220      	movs	r2, #32
 8002df4:	409a      	lsls	r2, r3
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b05      	cmp	r3, #5
 8002e04:	d136      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0216 	bic.w	r2, r2, #22
 8002e14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d103      	bne.n	8002e36 <HAL_DMA_IRQHandler+0x1da>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0208 	bic.w	r2, r2, #8
 8002e44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4a:	223f      	movs	r2, #63	; 0x3f
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d07d      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
        }
        return;
 8002e72:	e078      	b.n	8002f66 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d01c      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d108      	bne.n	8002ea2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d030      	beq.n	8002efa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	4798      	blx	r3
 8002ea0:	e02b      	b.n	8002efa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d027      	beq.n	8002efa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
 8002eb2:	e022      	b.n	8002efa <HAL_DMA_IRQHandler+0x29e>
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10f      	bne.n	8002eea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0210 	bic.w	r2, r2, #16
 8002ed8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d032      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d022      	beq.n	8002f54 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2205      	movs	r2, #5
 8002f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0201 	bic.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d307      	bcc.n	8002f42 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f2      	bne.n	8002f26 <HAL_DMA_IRQHandler+0x2ca>
 8002f40:	e000      	b.n	8002f44 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002f42:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	4798      	blx	r3
 8002f64:	e000      	b.n	8002f68 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002f66:	bf00      	nop
    }
  }
}
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop

08002f70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b40      	cmp	r3, #64	; 0x40
 8002f9c:	d108      	bne.n	8002fb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fae:	e007      	b.n	8002fc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	60da      	str	r2, [r3, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	3b10      	subs	r3, #16
 8002fdc:	4a14      	ldr	r2, [pc, #80]	; (8003030 <DMA_CalcBaseAndBitshift+0x64>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	091b      	lsrs	r3, r3, #4
 8002fe4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fe6:	4a13      	ldr	r2, [pc, #76]	; (8003034 <DMA_CalcBaseAndBitshift+0x68>)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4413      	add	r3, r2
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d909      	bls.n	800300e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003002:	f023 0303 	bic.w	r3, r3, #3
 8003006:	1d1a      	adds	r2, r3, #4
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	659a      	str	r2, [r3, #88]	; 0x58
 800300c:	e007      	b.n	800301e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003016:	f023 0303 	bic.w	r3, r3, #3
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	aaaaaaab 	.word	0xaaaaaaab
 8003034:	08005ecc 	.word	0x08005ecc

08003038 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d11f      	bne.n	8003092 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d855      	bhi.n	8003104 <DMA_CheckFifoParam+0xcc>
 8003058:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <DMA_CheckFifoParam+0x28>)
 800305a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305e:	bf00      	nop
 8003060:	08003071 	.word	0x08003071
 8003064:	08003083 	.word	0x08003083
 8003068:	08003071 	.word	0x08003071
 800306c:	08003105 	.word	0x08003105
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d045      	beq.n	8003108 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003080:	e042      	b.n	8003108 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800308a:	d13f      	bne.n	800310c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003090:	e03c      	b.n	800310c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800309a:	d121      	bne.n	80030e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d836      	bhi.n	8003110 <DMA_CheckFifoParam+0xd8>
 80030a2:	a201      	add	r2, pc, #4	; (adr r2, 80030a8 <DMA_CheckFifoParam+0x70>)
 80030a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a8:	080030b9 	.word	0x080030b9
 80030ac:	080030bf 	.word	0x080030bf
 80030b0:	080030b9 	.word	0x080030b9
 80030b4:	080030d1 	.word	0x080030d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
      break;
 80030bc:	e02f      	b.n	800311e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d024      	beq.n	8003114 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ce:	e021      	b.n	8003114 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030d8:	d11e      	bne.n	8003118 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030de:	e01b      	b.n	8003118 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d902      	bls.n	80030ec <DMA_CheckFifoParam+0xb4>
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d003      	beq.n	80030f2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030ea:	e018      	b.n	800311e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
      break;
 80030f0:	e015      	b.n	800311e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00e      	beq.n	800311c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
      break;
 8003102:	e00b      	b.n	800311c <DMA_CheckFifoParam+0xe4>
      break;
 8003104:	bf00      	nop
 8003106:	e00a      	b.n	800311e <DMA_CheckFifoParam+0xe6>
      break;
 8003108:	bf00      	nop
 800310a:	e008      	b.n	800311e <DMA_CheckFifoParam+0xe6>
      break;
 800310c:	bf00      	nop
 800310e:	e006      	b.n	800311e <DMA_CheckFifoParam+0xe6>
      break;
 8003110:	bf00      	nop
 8003112:	e004      	b.n	800311e <DMA_CheckFifoParam+0xe6>
      break;
 8003114:	bf00      	nop
 8003116:	e002      	b.n	800311e <DMA_CheckFifoParam+0xe6>
      break;   
 8003118:	bf00      	nop
 800311a:	e000      	b.n	800311e <DMA_CheckFifoParam+0xe6>
      break;
 800311c:	bf00      	nop
    }
  } 
  
  return status; 
 800311e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800312c:	b480      	push	{r7}
 800312e:	b089      	sub	sp, #36	; 0x24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800313e:	2300      	movs	r3, #0
 8003140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	e165      	b.n	8003414 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003148:	2201      	movs	r2, #1
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	429a      	cmp	r2, r3
 8003162:	f040 8154 	bne.w	800340e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d00b      	beq.n	8003186 <HAL_GPIO_Init+0x5a>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d007      	beq.n	8003186 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800317a:	2b11      	cmp	r3, #17
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b12      	cmp	r3, #18
 8003184:	d130      	bne.n	80031e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	2203      	movs	r2, #3
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031bc:	2201      	movs	r2, #1
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 0201 	and.w	r2, r3, #1
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	2203      	movs	r2, #3
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b02      	cmp	r3, #2
 800321e:	d003      	beq.n	8003228 <HAL_GPIO_Init+0xfc>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b12      	cmp	r3, #18
 8003226:	d123      	bne.n	8003270 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	08da      	lsrs	r2, r3, #3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3208      	adds	r2, #8
 8003230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003234:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	220f      	movs	r2, #15
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	08da      	lsrs	r2, r3, #3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3208      	adds	r2, #8
 800326a:	69b9      	ldr	r1, [r7, #24]
 800326c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	2203      	movs	r2, #3
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0203 	and.w	r2, r3, #3
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80ae 	beq.w	800340e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	4b5c      	ldr	r3, [pc, #368]	; (8003428 <HAL_GPIO_Init+0x2fc>)
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	4a5b      	ldr	r2, [pc, #364]	; (8003428 <HAL_GPIO_Init+0x2fc>)
 80032bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032c0:	6453      	str	r3, [r2, #68]	; 0x44
 80032c2:	4b59      	ldr	r3, [pc, #356]	; (8003428 <HAL_GPIO_Init+0x2fc>)
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ce:	4a57      	ldr	r2, [pc, #348]	; (800342c <HAL_GPIO_Init+0x300>)
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	089b      	lsrs	r3, r3, #2
 80032d4:	3302      	adds	r3, #2
 80032d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	220f      	movs	r2, #15
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4013      	ands	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4e      	ldr	r2, [pc, #312]	; (8003430 <HAL_GPIO_Init+0x304>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d025      	beq.n	8003346 <HAL_GPIO_Init+0x21a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a4d      	ldr	r2, [pc, #308]	; (8003434 <HAL_GPIO_Init+0x308>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01f      	beq.n	8003342 <HAL_GPIO_Init+0x216>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a4c      	ldr	r2, [pc, #304]	; (8003438 <HAL_GPIO_Init+0x30c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d019      	beq.n	800333e <HAL_GPIO_Init+0x212>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a4b      	ldr	r2, [pc, #300]	; (800343c <HAL_GPIO_Init+0x310>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d013      	beq.n	800333a <HAL_GPIO_Init+0x20e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a4a      	ldr	r2, [pc, #296]	; (8003440 <HAL_GPIO_Init+0x314>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00d      	beq.n	8003336 <HAL_GPIO_Init+0x20a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a49      	ldr	r2, [pc, #292]	; (8003444 <HAL_GPIO_Init+0x318>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d007      	beq.n	8003332 <HAL_GPIO_Init+0x206>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a48      	ldr	r2, [pc, #288]	; (8003448 <HAL_GPIO_Init+0x31c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d101      	bne.n	800332e <HAL_GPIO_Init+0x202>
 800332a:	2306      	movs	r3, #6
 800332c:	e00c      	b.n	8003348 <HAL_GPIO_Init+0x21c>
 800332e:	2307      	movs	r3, #7
 8003330:	e00a      	b.n	8003348 <HAL_GPIO_Init+0x21c>
 8003332:	2305      	movs	r3, #5
 8003334:	e008      	b.n	8003348 <HAL_GPIO_Init+0x21c>
 8003336:	2304      	movs	r3, #4
 8003338:	e006      	b.n	8003348 <HAL_GPIO_Init+0x21c>
 800333a:	2303      	movs	r3, #3
 800333c:	e004      	b.n	8003348 <HAL_GPIO_Init+0x21c>
 800333e:	2302      	movs	r3, #2
 8003340:	e002      	b.n	8003348 <HAL_GPIO_Init+0x21c>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <HAL_GPIO_Init+0x21c>
 8003346:	2300      	movs	r3, #0
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	f002 0203 	and.w	r2, r2, #3
 800334e:	0092      	lsls	r2, r2, #2
 8003350:	4093      	lsls	r3, r2
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4313      	orrs	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003358:	4934      	ldr	r1, [pc, #208]	; (800342c <HAL_GPIO_Init+0x300>)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	089b      	lsrs	r3, r3, #2
 800335e:	3302      	adds	r3, #2
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003366:	4b39      	ldr	r3, [pc, #228]	; (800344c <HAL_GPIO_Init+0x320>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800338a:	4a30      	ldr	r2, [pc, #192]	; (800344c <HAL_GPIO_Init+0x320>)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003390:	4b2e      	ldr	r3, [pc, #184]	; (800344c <HAL_GPIO_Init+0x320>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033b4:	4a25      	ldr	r2, [pc, #148]	; (800344c <HAL_GPIO_Init+0x320>)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ba:	4b24      	ldr	r3, [pc, #144]	; (800344c <HAL_GPIO_Init+0x320>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	43db      	mvns	r3, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4013      	ands	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033de:	4a1b      	ldr	r2, [pc, #108]	; (800344c <HAL_GPIO_Init+0x320>)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033e4:	4b19      	ldr	r3, [pc, #100]	; (800344c <HAL_GPIO_Init+0x320>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003408:	4a10      	ldr	r2, [pc, #64]	; (800344c <HAL_GPIO_Init+0x320>)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3301      	adds	r3, #1
 8003412:	61fb      	str	r3, [r7, #28]
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	2b0f      	cmp	r3, #15
 8003418:	f67f ae96 	bls.w	8003148 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800341c:	bf00      	nop
 800341e:	3724      	adds	r7, #36	; 0x24
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	40023800 	.word	0x40023800
 800342c:	40013800 	.word	0x40013800
 8003430:	40020000 	.word	0x40020000
 8003434:	40020400 	.word	0x40020400
 8003438:	40020800 	.word	0x40020800
 800343c:	40020c00 	.word	0x40020c00
 8003440:	40021000 	.word	0x40021000
 8003444:	40021400 	.word	0x40021400
 8003448:	40021800 	.word	0x40021800
 800344c:	40013c00 	.word	0x40013c00

08003450 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	887b      	ldrh	r3, [r7, #2]
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
 800346c:	e001      	b.n	8003472 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	807b      	strh	r3, [r7, #2]
 800348c:	4613      	mov	r3, r2
 800348e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003490:	787b      	ldrb	r3, [r7, #1]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003496:	887a      	ldrh	r2, [r7, #2]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800349c:	e003      	b.n	80034a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800349e:	887b      	ldrh	r3, [r7, #2]
 80034a0:	041a      	lsls	r2, r3, #16
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	619a      	str	r2, [r3, #24]
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0cc      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034c8:	4b68      	ldr	r3, [pc, #416]	; (800366c <HAL_RCC_ClockConfig+0x1b8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d90c      	bls.n	80034f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4b65      	ldr	r3, [pc, #404]	; (800366c <HAL_RCC_ClockConfig+0x1b8>)
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	4b63      	ldr	r3, [pc, #396]	; (800366c <HAL_RCC_ClockConfig+0x1b8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0b8      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d020      	beq.n	800353e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003508:	4b59      	ldr	r3, [pc, #356]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a58      	ldr	r2, [pc, #352]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003512:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003520:	4b53      	ldr	r3, [pc, #332]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4a52      	ldr	r2, [pc, #328]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800352a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800352c:	4b50      	ldr	r3, [pc, #320]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	494d      	ldr	r1, [pc, #308]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	4313      	orrs	r3, r2
 800353c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d044      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d107      	bne.n	8003562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003552:	4b47      	ldr	r3, [pc, #284]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d119      	bne.n	8003592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e07f      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d003      	beq.n	8003572 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800356e:	2b03      	cmp	r3, #3
 8003570:	d107      	bne.n	8003582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003572:	4b3f      	ldr	r3, [pc, #252]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e06f      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003582:	4b3b      	ldr	r3, [pc, #236]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e067      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003592:	4b37      	ldr	r3, [pc, #220]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f023 0203 	bic.w	r2, r3, #3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	4934      	ldr	r1, [pc, #208]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035a4:	f7fe fa9a 	bl	8001adc <HAL_GetTick>
 80035a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	e00a      	b.n	80035c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ac:	f7fe fa96 	bl	8001adc <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e04f      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c2:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 020c 	and.w	r2, r3, #12
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d1eb      	bne.n	80035ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d4:	4b25      	ldr	r3, [pc, #148]	; (800366c <HAL_RCC_ClockConfig+0x1b8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d20c      	bcs.n	80035fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	4b22      	ldr	r3, [pc, #136]	; (800366c <HAL_RCC_ClockConfig+0x1b8>)
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ea:	4b20      	ldr	r3, [pc, #128]	; (800366c <HAL_RCC_ClockConfig+0x1b8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e032      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003608:	4b19      	ldr	r3, [pc, #100]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4916      	ldr	r1, [pc, #88]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d009      	beq.n	800363a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003626:	4b12      	ldr	r3, [pc, #72]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	490e      	ldr	r1, [pc, #56]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	4313      	orrs	r3, r2
 8003638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800363a:	f000 f855 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 800363e:	4601      	mov	r1, r0
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	091b      	lsrs	r3, r3, #4
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	4a0a      	ldr	r2, [pc, #40]	; (8003674 <HAL_RCC_ClockConfig+0x1c0>)
 800364c:	5cd3      	ldrb	r3, [r2, r3]
 800364e:	fa21 f303 	lsr.w	r3, r1, r3
 8003652:	4a09      	ldr	r2, [pc, #36]	; (8003678 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003656:	4b09      	ldr	r3, [pc, #36]	; (800367c <HAL_RCC_ClockConfig+0x1c8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fe f9fa 	bl	8001a54 <HAL_InitTick>

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40023c00 	.word	0x40023c00
 8003670:	40023800 	.word	0x40023800
 8003674:	08005eb4 	.word	0x08005eb4
 8003678:	20000000 	.word	0x20000000
 800367c:	20000004 	.word	0x20000004

08003680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003684:	4b03      	ldr	r3, [pc, #12]	; (8003694 <HAL_RCC_GetHCLKFreq+0x14>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	20000000 	.word	0x20000000

08003698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800369c:	f7ff fff0 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036a0:	4601      	mov	r1, r0
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	0a9b      	lsrs	r3, r3, #10
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4a03      	ldr	r2, [pc, #12]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ae:	5cd3      	ldrb	r3, [r2, r3]
 80036b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40023800 	.word	0x40023800
 80036bc:	08005ec4 	.word	0x08005ec4

080036c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036c4:	f7ff ffdc 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036c8:	4601      	mov	r1, r0
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	0b5b      	lsrs	r3, r3, #13
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4a03      	ldr	r2, [pc, #12]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d6:	5cd3      	ldrb	r3, [r2, r3]
 80036d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40023800 	.word	0x40023800
 80036e4:	08005ec4 	.word	0x08005ec4

080036e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003702:	4bc6      	ldr	r3, [pc, #792]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x334>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b0c      	cmp	r3, #12
 800370c:	f200 817e 	bhi.w	8003a0c <HAL_RCC_GetSysClockFreq+0x324>
 8003710:	a201      	add	r2, pc, #4	; (adr r2, 8003718 <HAL_RCC_GetSysClockFreq+0x30>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	0800374d 	.word	0x0800374d
 800371c:	08003a0d 	.word	0x08003a0d
 8003720:	08003a0d 	.word	0x08003a0d
 8003724:	08003a0d 	.word	0x08003a0d
 8003728:	08003753 	.word	0x08003753
 800372c:	08003a0d 	.word	0x08003a0d
 8003730:	08003a0d 	.word	0x08003a0d
 8003734:	08003a0d 	.word	0x08003a0d
 8003738:	08003759 	.word	0x08003759
 800373c:	08003a0d 	.word	0x08003a0d
 8003740:	08003a0d 	.word	0x08003a0d
 8003744:	08003a0d 	.word	0x08003a0d
 8003748:	080038b5 	.word	0x080038b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800374c:	4bb4      	ldr	r3, [pc, #720]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x338>)
 800374e:	613b      	str	r3, [r7, #16]
       break;
 8003750:	e15f      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003752:	4bb4      	ldr	r3, [pc, #720]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003754:	613b      	str	r3, [r7, #16]
      break;
 8003756:	e15c      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003758:	4bb0      	ldr	r3, [pc, #704]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x334>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003760:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003762:	4bae      	ldr	r3, [pc, #696]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x334>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d04a      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376e:	4bab      	ldr	r3, [pc, #684]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x334>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	099b      	lsrs	r3, r3, #6
 8003774:	f04f 0400 	mov.w	r4, #0
 8003778:	f240 11ff 	movw	r1, #511	; 0x1ff
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	ea03 0501 	and.w	r5, r3, r1
 8003784:	ea04 0602 	and.w	r6, r4, r2
 8003788:	4629      	mov	r1, r5
 800378a:	4632      	mov	r2, r6
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	f04f 0400 	mov.w	r4, #0
 8003794:	0154      	lsls	r4, r2, #5
 8003796:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800379a:	014b      	lsls	r3, r1, #5
 800379c:	4619      	mov	r1, r3
 800379e:	4622      	mov	r2, r4
 80037a0:	1b49      	subs	r1, r1, r5
 80037a2:	eb62 0206 	sbc.w	r2, r2, r6
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	f04f 0400 	mov.w	r4, #0
 80037ae:	0194      	lsls	r4, r2, #6
 80037b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037b4:	018b      	lsls	r3, r1, #6
 80037b6:	1a5b      	subs	r3, r3, r1
 80037b8:	eb64 0402 	sbc.w	r4, r4, r2
 80037bc:	f04f 0100 	mov.w	r1, #0
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	00e2      	lsls	r2, r4, #3
 80037c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037ca:	00d9      	lsls	r1, r3, #3
 80037cc:	460b      	mov	r3, r1
 80037ce:	4614      	mov	r4, r2
 80037d0:	195b      	adds	r3, r3, r5
 80037d2:	eb44 0406 	adc.w	r4, r4, r6
 80037d6:	f04f 0100 	mov.w	r1, #0
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	0262      	lsls	r2, r4, #9
 80037e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80037e4:	0259      	lsls	r1, r3, #9
 80037e6:	460b      	mov	r3, r1
 80037e8:	4614      	mov	r4, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	4621      	mov	r1, r4
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f04f 0400 	mov.w	r4, #0
 80037f4:	461a      	mov	r2, r3
 80037f6:	4623      	mov	r3, r4
 80037f8:	f7fc fd04 	bl	8000204 <__aeabi_uldivmod>
 80037fc:	4603      	mov	r3, r0
 80037fe:	460c      	mov	r4, r1
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	e049      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003804:	4b85      	ldr	r3, [pc, #532]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x334>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	099b      	lsrs	r3, r3, #6
 800380a:	f04f 0400 	mov.w	r4, #0
 800380e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	ea03 0501 	and.w	r5, r3, r1
 800381a:	ea04 0602 	and.w	r6, r4, r2
 800381e:	4629      	mov	r1, r5
 8003820:	4632      	mov	r2, r6
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	f04f 0400 	mov.w	r4, #0
 800382a:	0154      	lsls	r4, r2, #5
 800382c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003830:	014b      	lsls	r3, r1, #5
 8003832:	4619      	mov	r1, r3
 8003834:	4622      	mov	r2, r4
 8003836:	1b49      	subs	r1, r1, r5
 8003838:	eb62 0206 	sbc.w	r2, r2, r6
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	f04f 0400 	mov.w	r4, #0
 8003844:	0194      	lsls	r4, r2, #6
 8003846:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800384a:	018b      	lsls	r3, r1, #6
 800384c:	1a5b      	subs	r3, r3, r1
 800384e:	eb64 0402 	sbc.w	r4, r4, r2
 8003852:	f04f 0100 	mov.w	r1, #0
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	00e2      	lsls	r2, r4, #3
 800385c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003860:	00d9      	lsls	r1, r3, #3
 8003862:	460b      	mov	r3, r1
 8003864:	4614      	mov	r4, r2
 8003866:	195b      	adds	r3, r3, r5
 8003868:	eb44 0406 	adc.w	r4, r4, r6
 800386c:	f04f 0100 	mov.w	r1, #0
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	02a2      	lsls	r2, r4, #10
 8003876:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800387a:	0299      	lsls	r1, r3, #10
 800387c:	460b      	mov	r3, r1
 800387e:	4614      	mov	r4, r2
 8003880:	4618      	mov	r0, r3
 8003882:	4621      	mov	r1, r4
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f04f 0400 	mov.w	r4, #0
 800388a:	461a      	mov	r2, r3
 800388c:	4623      	mov	r3, r4
 800388e:	f7fc fcb9 	bl	8000204 <__aeabi_uldivmod>
 8003892:	4603      	mov	r3, r0
 8003894:	460c      	mov	r4, r1
 8003896:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003898:	4b60      	ldr	r3, [pc, #384]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x334>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	0c1b      	lsrs	r3, r3, #16
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	3301      	adds	r3, #1
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	613b      	str	r3, [r7, #16]
      break;
 80038b2:	e0ae      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038b4:	4b59      	ldr	r3, [pc, #356]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x334>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038bc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038be:	4b57      	ldr	r3, [pc, #348]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x334>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d04a      	beq.n	8003960 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ca:	4b54      	ldr	r3, [pc, #336]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x334>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	099b      	lsrs	r3, r3, #6
 80038d0:	f04f 0400 	mov.w	r4, #0
 80038d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	ea03 0501 	and.w	r5, r3, r1
 80038e0:	ea04 0602 	and.w	r6, r4, r2
 80038e4:	4629      	mov	r1, r5
 80038e6:	4632      	mov	r2, r6
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	f04f 0400 	mov.w	r4, #0
 80038f0:	0154      	lsls	r4, r2, #5
 80038f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038f6:	014b      	lsls	r3, r1, #5
 80038f8:	4619      	mov	r1, r3
 80038fa:	4622      	mov	r2, r4
 80038fc:	1b49      	subs	r1, r1, r5
 80038fe:	eb62 0206 	sbc.w	r2, r2, r6
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	f04f 0400 	mov.w	r4, #0
 800390a:	0194      	lsls	r4, r2, #6
 800390c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003910:	018b      	lsls	r3, r1, #6
 8003912:	1a5b      	subs	r3, r3, r1
 8003914:	eb64 0402 	sbc.w	r4, r4, r2
 8003918:	f04f 0100 	mov.w	r1, #0
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	00e2      	lsls	r2, r4, #3
 8003922:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003926:	00d9      	lsls	r1, r3, #3
 8003928:	460b      	mov	r3, r1
 800392a:	4614      	mov	r4, r2
 800392c:	195b      	adds	r3, r3, r5
 800392e:	eb44 0406 	adc.w	r4, r4, r6
 8003932:	f04f 0100 	mov.w	r1, #0
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	0262      	lsls	r2, r4, #9
 800393c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003940:	0259      	lsls	r1, r3, #9
 8003942:	460b      	mov	r3, r1
 8003944:	4614      	mov	r4, r2
 8003946:	4618      	mov	r0, r3
 8003948:	4621      	mov	r1, r4
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f04f 0400 	mov.w	r4, #0
 8003950:	461a      	mov	r2, r3
 8003952:	4623      	mov	r3, r4
 8003954:	f7fc fc56 	bl	8000204 <__aeabi_uldivmod>
 8003958:	4603      	mov	r3, r0
 800395a:	460c      	mov	r4, r1
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	e049      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003960:	4b2e      	ldr	r3, [pc, #184]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x334>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	099b      	lsrs	r3, r3, #6
 8003966:	f04f 0400 	mov.w	r4, #0
 800396a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	ea03 0501 	and.w	r5, r3, r1
 8003976:	ea04 0602 	and.w	r6, r4, r2
 800397a:	4629      	mov	r1, r5
 800397c:	4632      	mov	r2, r6
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	f04f 0400 	mov.w	r4, #0
 8003986:	0154      	lsls	r4, r2, #5
 8003988:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800398c:	014b      	lsls	r3, r1, #5
 800398e:	4619      	mov	r1, r3
 8003990:	4622      	mov	r2, r4
 8003992:	1b49      	subs	r1, r1, r5
 8003994:	eb62 0206 	sbc.w	r2, r2, r6
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	f04f 0400 	mov.w	r4, #0
 80039a0:	0194      	lsls	r4, r2, #6
 80039a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039a6:	018b      	lsls	r3, r1, #6
 80039a8:	1a5b      	subs	r3, r3, r1
 80039aa:	eb64 0402 	sbc.w	r4, r4, r2
 80039ae:	f04f 0100 	mov.w	r1, #0
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	00e2      	lsls	r2, r4, #3
 80039b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039bc:	00d9      	lsls	r1, r3, #3
 80039be:	460b      	mov	r3, r1
 80039c0:	4614      	mov	r4, r2
 80039c2:	195b      	adds	r3, r3, r5
 80039c4:	eb44 0406 	adc.w	r4, r4, r6
 80039c8:	f04f 0100 	mov.w	r1, #0
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	02a2      	lsls	r2, r4, #10
 80039d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80039d6:	0299      	lsls	r1, r3, #10
 80039d8:	460b      	mov	r3, r1
 80039da:	4614      	mov	r4, r2
 80039dc:	4618      	mov	r0, r3
 80039de:	4621      	mov	r1, r4
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f04f 0400 	mov.w	r4, #0
 80039e6:	461a      	mov	r2, r3
 80039e8:	4623      	mov	r3, r4
 80039ea:	f7fc fc0b 	bl	8000204 <__aeabi_uldivmod>
 80039ee:	4603      	mov	r3, r0
 80039f0:	460c      	mov	r4, r1
 80039f2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80039f4:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x334>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	0f1b      	lsrs	r3, r3, #28
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a08:	613b      	str	r3, [r7, #16]
      break;
 8003a0a:	e002      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a0c:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x338>)
 8003a0e:	613b      	str	r3, [r7, #16]
      break;
 8003a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a12:	693b      	ldr	r3, [r7, #16]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	00f42400 	.word	0x00f42400
 8003a24:	007a1200 	.word	0x007a1200

08003a28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 8083 	beq.w	8003b48 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a42:	4b95      	ldr	r3, [pc, #596]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d019      	beq.n	8003a82 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a4e:	4b92      	ldr	r3, [pc, #584]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d106      	bne.n	8003a68 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a5a:	4b8f      	ldr	r3, [pc, #572]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a66:	d00c      	beq.n	8003a82 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a68:	4b8b      	ldr	r3, [pc, #556]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a70:	2b0c      	cmp	r3, #12
 8003a72:	d112      	bne.n	8003a9a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a74:	4b88      	ldr	r3, [pc, #544]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a80:	d10b      	bne.n	8003a9a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a82:	4b85      	ldr	r3, [pc, #532]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d05b      	beq.n	8003b46 <HAL_RCC_OscConfig+0x11e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d157      	bne.n	8003b46 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e216      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa2:	d106      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x8a>
 8003aa4:	4b7c      	ldr	r3, [pc, #496]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a7b      	ldr	r2, [pc, #492]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	e01d      	b.n	8003aee <HAL_RCC_OscConfig+0xc6>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aba:	d10c      	bne.n	8003ad6 <HAL_RCC_OscConfig+0xae>
 8003abc:	4b76      	ldr	r3, [pc, #472]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a75      	ldr	r2, [pc, #468]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b73      	ldr	r3, [pc, #460]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a72      	ldr	r2, [pc, #456]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	e00b      	b.n	8003aee <HAL_RCC_OscConfig+0xc6>
 8003ad6:	4b70      	ldr	r3, [pc, #448]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a6f      	ldr	r2, [pc, #444]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	4b6d      	ldr	r3, [pc, #436]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a6c      	ldr	r2, [pc, #432]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d013      	beq.n	8003b1e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af6:	f7fd fff1 	bl	8001adc <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003afe:	f7fd ffed 	bl	8001adc <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b64      	cmp	r3, #100	; 0x64
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e1db      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b10:	4b61      	ldr	r3, [pc, #388]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0xd6>
 8003b1c:	e014      	b.n	8003b48 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1e:	f7fd ffdd 	bl	8001adc <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b26:	f7fd ffd9 	bl	8001adc <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b64      	cmp	r3, #100	; 0x64
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e1c7      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b38:	4b57      	ldr	r3, [pc, #348]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f0      	bne.n	8003b26 <HAL_RCC_OscConfig+0xfe>
 8003b44:	e000      	b.n	8003b48 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b46:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d06f      	beq.n	8003c34 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b54:	4b50      	ldr	r3, [pc, #320]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 030c 	and.w	r3, r3, #12
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d017      	beq.n	8003b90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b60:	4b4d      	ldr	r3, [pc, #308]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d105      	bne.n	8003b78 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b6c:	4b4a      	ldr	r3, [pc, #296]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00b      	beq.n	8003b90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b78:	4b47      	ldr	r3, [pc, #284]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b80:	2b0c      	cmp	r3, #12
 8003b82:	d11c      	bne.n	8003bbe <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b84:	4b44      	ldr	r3, [pc, #272]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d116      	bne.n	8003bbe <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b90:	4b41      	ldr	r3, [pc, #260]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x180>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e18f      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba8:	4b3b      	ldr	r3, [pc, #236]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4938      	ldr	r1, [pc, #224]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bbc:	e03a      	b.n	8003c34 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d020      	beq.n	8003c08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bc6:	4b35      	ldr	r3, [pc, #212]	; (8003c9c <HAL_RCC_OscConfig+0x274>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bcc:	f7fd ff86 	bl	8001adc <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bd4:	f7fd ff82 	bl	8001adc <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e170      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be6:	4b2c      	ldr	r3, [pc, #176]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf2:	4b29      	ldr	r3, [pc, #164]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4925      	ldr	r1, [pc, #148]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	600b      	str	r3, [r1, #0]
 8003c06:	e015      	b.n	8003c34 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c08:	4b24      	ldr	r3, [pc, #144]	; (8003c9c <HAL_RCC_OscConfig+0x274>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0e:	f7fd ff65 	bl	8001adc <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c16:	f7fd ff61 	bl	8001adc <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e14f      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c28:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f0      	bne.n	8003c16 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d037      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d016      	beq.n	8003c76 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c48:	4b15      	ldr	r3, [pc, #84]	; (8003ca0 <HAL_RCC_OscConfig+0x278>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4e:	f7fd ff45 	bl	8001adc <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c56:	f7fd ff41 	bl	8001adc <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e12f      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_RCC_OscConfig+0x270>)
 8003c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x22e>
 8003c74:	e01c      	b.n	8003cb0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c76:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <HAL_RCC_OscConfig+0x278>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7c:	f7fd ff2e 	bl	8001adc <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c82:	e00f      	b.n	8003ca4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c84:	f7fd ff2a 	bl	8001adc <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d908      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e118      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4a0>
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	42470000 	.word	0x42470000
 8003ca0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca4:	4b8a      	ldr	r3, [pc, #552]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e9      	bne.n	8003c84 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 8097 	beq.w	8003dec <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc2:	4b83      	ldr	r3, [pc, #524]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10f      	bne.n	8003cee <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	4b7f      	ldr	r3, [pc, #508]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	4a7e      	ldr	r2, [pc, #504]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cde:	4b7c      	ldr	r3, [pc, #496]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003cea:	2301      	movs	r3, #1
 8003cec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cee:	4b79      	ldr	r3, [pc, #484]	; (8003ed4 <HAL_RCC_OscConfig+0x4ac>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d118      	bne.n	8003d2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cfa:	4b76      	ldr	r3, [pc, #472]	; (8003ed4 <HAL_RCC_OscConfig+0x4ac>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a75      	ldr	r2, [pc, #468]	; (8003ed4 <HAL_RCC_OscConfig+0x4ac>)
 8003d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d06:	f7fd fee9 	bl	8001adc <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d0e:	f7fd fee5 	bl	8001adc <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e0d3      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d20:	4b6c      	ldr	r3, [pc, #432]	; (8003ed4 <HAL_RCC_OscConfig+0x4ac>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d106      	bne.n	8003d42 <HAL_RCC_OscConfig+0x31a>
 8003d34:	4b66      	ldr	r3, [pc, #408]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	4a65      	ldr	r2, [pc, #404]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d40:	e01c      	b.n	8003d7c <HAL_RCC_OscConfig+0x354>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2b05      	cmp	r3, #5
 8003d48:	d10c      	bne.n	8003d64 <HAL_RCC_OscConfig+0x33c>
 8003d4a:	4b61      	ldr	r3, [pc, #388]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	4a60      	ldr	r2, [pc, #384]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003d50:	f043 0304 	orr.w	r3, r3, #4
 8003d54:	6713      	str	r3, [r2, #112]	; 0x70
 8003d56:	4b5e      	ldr	r3, [pc, #376]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5a:	4a5d      	ldr	r2, [pc, #372]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	6713      	str	r3, [r2, #112]	; 0x70
 8003d62:	e00b      	b.n	8003d7c <HAL_RCC_OscConfig+0x354>
 8003d64:	4b5a      	ldr	r3, [pc, #360]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	4a59      	ldr	r2, [pc, #356]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003d6a:	f023 0301 	bic.w	r3, r3, #1
 8003d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d70:	4b57      	ldr	r3, [pc, #348]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	4a56      	ldr	r2, [pc, #344]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003d76:	f023 0304 	bic.w	r3, r3, #4
 8003d7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d015      	beq.n	8003db0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d84:	f7fd feaa 	bl	8001adc <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d8c:	f7fd fea6 	bl	8001adc <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e092      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da2:	4b4b      	ldr	r3, [pc, #300]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0ee      	beq.n	8003d8c <HAL_RCC_OscConfig+0x364>
 8003dae:	e014      	b.n	8003dda <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db0:	f7fd fe94 	bl	8001adc <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db6:	e00a      	b.n	8003dce <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003db8:	f7fd fe90 	bl	8001adc <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e07c      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dce:	4b40      	ldr	r3, [pc, #256]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1ee      	bne.n	8003db8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d105      	bne.n	8003dec <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003de0:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	4a3a      	ldr	r2, [pc, #232]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d068      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003df4:	4b36      	ldr	r3, [pc, #216]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 030c 	and.w	r3, r3, #12
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d060      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d145      	bne.n	8003e94 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e08:	4b33      	ldr	r3, [pc, #204]	; (8003ed8 <HAL_RCC_OscConfig+0x4b0>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0e:	f7fd fe65 	bl	8001adc <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e16:	f7fd fe61 	bl	8001adc <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e04f      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e28:	4b29      	ldr	r3, [pc, #164]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f0      	bne.n	8003e16 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69da      	ldr	r2, [r3, #28]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	019b      	lsls	r3, r3, #6
 8003e44:	431a      	orrs	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	085b      	lsrs	r3, r3, #1
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	041b      	lsls	r3, r3, #16
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	061b      	lsls	r3, r3, #24
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	071b      	lsls	r3, r3, #28
 8003e60:	491b      	ldr	r1, [pc, #108]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e66:	4b1c      	ldr	r3, [pc, #112]	; (8003ed8 <HAL_RCC_OscConfig+0x4b0>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fd fe36 	bl	8001adc <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fd fe32 	bl	8001adc <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e020      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e86:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0x44c>
 8003e92:	e018      	b.n	8003ec6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e94:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <HAL_RCC_OscConfig+0x4b0>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9a:	f7fd fe1f 	bl	8001adc <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea2:	f7fd fe1b 	bl	8001adc <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e009      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb4:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_RCC_OscConfig+0x4a8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f0      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x47a>
 8003ec0:	e001      	b.n	8003ec6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	40007000 	.word	0x40007000
 8003ed8:	42470060 	.word	0x42470060

08003edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e01d      	b.n	8003f2a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fd fc14 	bl	8001730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	f000 fa1e 	bl	800435c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b085      	sub	sp, #20
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b06      	cmp	r3, #6
 8003f52:	d007      	beq.n	8003f64 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d122      	bne.n	8003fd6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d11b      	bne.n	8003fd6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f06f 0202 	mvn.w	r2, #2
 8003fa6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f9af 	bl	8004320 <HAL_TIM_IC_CaptureCallback>
 8003fc2:	e005      	b.n	8003fd0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f9a1 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f9b2 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d122      	bne.n	800402a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d11b      	bne.n	800402a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f06f 0204 	mvn.w	r2, #4
 8003ffa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f985 	bl	8004320 <HAL_TIM_IC_CaptureCallback>
 8004016:	e005      	b.n	8004024 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f977 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f988 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b08      	cmp	r3, #8
 8004036:	d122      	bne.n	800407e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b08      	cmp	r3, #8
 8004044:	d11b      	bne.n	800407e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f06f 0208 	mvn.w	r2, #8
 800404e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2204      	movs	r2, #4
 8004054:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f95b 	bl	8004320 <HAL_TIM_IC_CaptureCallback>
 800406a:	e005      	b.n	8004078 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f94d 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f95e 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b10      	cmp	r3, #16
 800408a:	d122      	bne.n	80040d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	2b10      	cmp	r3, #16
 8004098:	d11b      	bne.n	80040d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f06f 0210 	mvn.w	r2, #16
 80040a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2208      	movs	r2, #8
 80040a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f931 	bl	8004320 <HAL_TIM_IC_CaptureCallback>
 80040be:	e005      	b.n	80040cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f923 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f934 	bl	8004334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d10e      	bne.n	80040fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d107      	bne.n	80040fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f06f 0201 	mvn.w	r2, #1
 80040f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f8fd 	bl	80042f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004108:	2b80      	cmp	r3, #128	; 0x80
 800410a:	d10e      	bne.n	800412a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004116:	2b80      	cmp	r3, #128	; 0x80
 8004118:	d107      	bne.n	800412a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fad9 	bl	80046dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004134:	2b40      	cmp	r3, #64	; 0x40
 8004136:	d10e      	bne.n	8004156 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004142:	2b40      	cmp	r3, #64	; 0x40
 8004144:	d107      	bne.n	8004156 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800414e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f8f9 	bl	8004348 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b20      	cmp	r3, #32
 8004162:	d10e      	bne.n	8004182 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b20      	cmp	r3, #32
 8004170:	d107      	bne.n	8004182 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f06f 0220 	mvn.w	r2, #32
 800417a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 faa3 	bl	80046c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <HAL_TIM_ConfigClockSource+0x18>
 800419e:	2302      	movs	r3, #2
 80041a0:	e0a6      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x166>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041c0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041c8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	d067      	beq.n	80042aa <HAL_TIM_ConfigClockSource+0x120>
 80041da:	2b40      	cmp	r3, #64	; 0x40
 80041dc:	d80b      	bhi.n	80041f6 <HAL_TIM_ConfigClockSource+0x6c>
 80041de:	2b10      	cmp	r3, #16
 80041e0:	d073      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x140>
 80041e2:	2b10      	cmp	r3, #16
 80041e4:	d802      	bhi.n	80041ec <HAL_TIM_ConfigClockSource+0x62>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d06f      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80041ea:	e078      	b.n	80042de <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d06c      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x140>
 80041f0:	2b30      	cmp	r3, #48	; 0x30
 80041f2:	d06a      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x140>
      break;
 80041f4:	e073      	b.n	80042de <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041f6:	2b70      	cmp	r3, #112	; 0x70
 80041f8:	d00d      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0x8c>
 80041fa:	2b70      	cmp	r3, #112	; 0x70
 80041fc:	d804      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x7e>
 80041fe:	2b50      	cmp	r3, #80	; 0x50
 8004200:	d033      	beq.n	800426a <HAL_TIM_ConfigClockSource+0xe0>
 8004202:	2b60      	cmp	r3, #96	; 0x60
 8004204:	d041      	beq.n	800428a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004206:	e06a      	b.n	80042de <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800420c:	d066      	beq.n	80042dc <HAL_TIM_ConfigClockSource+0x152>
 800420e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004212:	d017      	beq.n	8004244 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004214:	e063      	b.n	80042de <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6899      	ldr	r1, [r3, #8]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f000 f9b3 	bl	8004590 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004238:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	609a      	str	r2, [r3, #8]
      break;
 8004242:	e04c      	b.n	80042de <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	6899      	ldr	r1, [r3, #8]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f000 f99c 	bl	8004590 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004266:	609a      	str	r2, [r3, #8]
      break;
 8004268:	e039      	b.n	80042de <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6818      	ldr	r0, [r3, #0]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	6859      	ldr	r1, [r3, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	461a      	mov	r2, r3
 8004278:	f000 f910 	bl	800449c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2150      	movs	r1, #80	; 0x50
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f969 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 8004288:	e029      	b.n	80042de <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6859      	ldr	r1, [r3, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	461a      	mov	r2, r3
 8004298:	f000 f92f 	bl	80044fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2160      	movs	r1, #96	; 0x60
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 f959 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 80042a8:	e019      	b.n	80042de <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6859      	ldr	r1, [r3, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f000 f8f0 	bl	800449c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2140      	movs	r1, #64	; 0x40
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 f949 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 80042c8:	e009      	b.n	80042de <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4619      	mov	r1, r3
 80042d4:	4610      	mov	r0, r2
 80042d6:	f000 f940 	bl	800455a <TIM_ITRx_SetConfig>
      break;
 80042da:	e000      	b.n	80042de <HAL_TIM_ConfigClockSource+0x154>
      break;
 80042dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a40      	ldr	r2, [pc, #256]	; (8004470 <TIM_Base_SetConfig+0x114>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d013      	beq.n	800439c <TIM_Base_SetConfig+0x40>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437a:	d00f      	beq.n	800439c <TIM_Base_SetConfig+0x40>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a3d      	ldr	r2, [pc, #244]	; (8004474 <TIM_Base_SetConfig+0x118>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00b      	beq.n	800439c <TIM_Base_SetConfig+0x40>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a3c      	ldr	r2, [pc, #240]	; (8004478 <TIM_Base_SetConfig+0x11c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d007      	beq.n	800439c <TIM_Base_SetConfig+0x40>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a3b      	ldr	r2, [pc, #236]	; (800447c <TIM_Base_SetConfig+0x120>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d003      	beq.n	800439c <TIM_Base_SetConfig+0x40>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a3a      	ldr	r2, [pc, #232]	; (8004480 <TIM_Base_SetConfig+0x124>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d108      	bne.n	80043ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a2f      	ldr	r2, [pc, #188]	; (8004470 <TIM_Base_SetConfig+0x114>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d02b      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043bc:	d027      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a2c      	ldr	r2, [pc, #176]	; (8004474 <TIM_Base_SetConfig+0x118>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d023      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a2b      	ldr	r2, [pc, #172]	; (8004478 <TIM_Base_SetConfig+0x11c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d01f      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a2a      	ldr	r2, [pc, #168]	; (800447c <TIM_Base_SetConfig+0x120>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d01b      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a29      	ldr	r2, [pc, #164]	; (8004480 <TIM_Base_SetConfig+0x124>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d017      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a28      	ldr	r2, [pc, #160]	; (8004484 <TIM_Base_SetConfig+0x128>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d013      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a27      	ldr	r2, [pc, #156]	; (8004488 <TIM_Base_SetConfig+0x12c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00f      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a26      	ldr	r2, [pc, #152]	; (800448c <TIM_Base_SetConfig+0x130>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00b      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a25      	ldr	r2, [pc, #148]	; (8004490 <TIM_Base_SetConfig+0x134>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d007      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a24      	ldr	r2, [pc, #144]	; (8004494 <TIM_Base_SetConfig+0x138>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d003      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a23      	ldr	r2, [pc, #140]	; (8004498 <TIM_Base_SetConfig+0x13c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d108      	bne.n	8004420 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a0a      	ldr	r2, [pc, #40]	; (8004470 <TIM_Base_SetConfig+0x114>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d003      	beq.n	8004454 <TIM_Base_SetConfig+0xf8>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a0c      	ldr	r2, [pc, #48]	; (8004480 <TIM_Base_SetConfig+0x124>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d103      	bne.n	800445c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	615a      	str	r2, [r3, #20]
}
 8004462:	bf00      	nop
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40010000 	.word	0x40010000
 8004474:	40000400 	.word	0x40000400
 8004478:	40000800 	.word	0x40000800
 800447c:	40000c00 	.word	0x40000c00
 8004480:	40010400 	.word	0x40010400
 8004484:	40014000 	.word	0x40014000
 8004488:	40014400 	.word	0x40014400
 800448c:	40014800 	.word	0x40014800
 8004490:	40001800 	.word	0x40001800
 8004494:	40001c00 	.word	0x40001c00
 8004498:	40002000 	.word	0x40002000

0800449c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f023 0201 	bic.w	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f023 030a 	bic.w	r3, r3, #10
 80044d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	621a      	str	r2, [r3, #32]
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b087      	sub	sp, #28
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f023 0210 	bic.w	r2, r3, #16
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004524:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	031b      	lsls	r3, r3, #12
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004536:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	621a      	str	r2, [r3, #32]
}
 800454e:	bf00      	nop
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800455a:	b480      	push	{r7}
 800455c:	b085      	sub	sp, #20
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	f043 0307 	orr.w	r3, r3, #7
 800457c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	609a      	str	r2, [r3, #8]
}
 8004584:	bf00      	nop
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	021a      	lsls	r2, r3, #8
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	609a      	str	r2, [r3, #8]
}
 80045c4:	bf00      	nop
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e05a      	b.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a21      	ldr	r2, [pc, #132]	; (80046ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d022      	beq.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004634:	d01d      	beq.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a1d      	ldr	r2, [pc, #116]	; (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d018      	beq.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a1b      	ldr	r2, [pc, #108]	; (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d013      	beq.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a1a      	ldr	r2, [pc, #104]	; (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00e      	beq.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a18      	ldr	r2, [pc, #96]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d009      	beq.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a17      	ldr	r2, [pc, #92]	; (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d004      	beq.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a15      	ldr	r2, [pc, #84]	; (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d10c      	bne.n	800468c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004678:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	4313      	orrs	r3, r2
 8004682:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40010000 	.word	0x40010000
 80046b0:	40000400 	.word	0x40000400
 80046b4:	40000800 	.word	0x40000800
 80046b8:	40000c00 	.word	0x40000c00
 80046bc:	40010400 	.word	0x40010400
 80046c0:	40014000 	.word	0x40014000
 80046c4:	40001800 	.word	0x40001800

080046c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e03f      	b.n	8004782 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fd f85c 	bl	80017d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2224      	movs	r2, #36	; 0x24
 8004720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 faa5 	bl	8004c84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695a      	ldr	r2, [r3, #20]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b088      	sub	sp, #32
 800478e:	af02      	add	r7, sp, #8
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	603b      	str	r3, [r7, #0]
 8004796:	4613      	mov	r3, r2
 8004798:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	f040 8083 	bne.w	80048b2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <HAL_UART_Transmit+0x2e>
 80047b2:	88fb      	ldrh	r3, [r7, #6]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e07b      	b.n	80048b4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_UART_Transmit+0x40>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e074      	b.n	80048b4 <HAL_UART_Transmit+0x12a>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2221      	movs	r2, #33	; 0x21
 80047dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80047e0:	f7fd f97c 	bl	8001adc <HAL_GetTick>
 80047e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	88fa      	ldrh	r2, [r7, #6]
 80047ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	88fa      	ldrh	r2, [r7, #6]
 80047f0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80047fa:	e042      	b.n	8004882 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004812:	d122      	bne.n	800485a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2200      	movs	r2, #0
 800481c:	2180      	movs	r1, #128	; 0x80
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f9b2 	bl	8004b88 <UART_WaitOnFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e042      	b.n	80048b4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004840:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d103      	bne.n	8004852 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	3302      	adds	r3, #2
 800484e:	60bb      	str	r3, [r7, #8]
 8004850:	e017      	b.n	8004882 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	3301      	adds	r3, #1
 8004856:	60bb      	str	r3, [r7, #8]
 8004858:	e013      	b.n	8004882 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2200      	movs	r2, #0
 8004862:	2180      	movs	r1, #128	; 0x80
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 f98f 	bl	8004b88 <UART_WaitOnFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e01f      	b.n	80048b4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	60ba      	str	r2, [r7, #8]
 800487a:	781a      	ldrb	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1b7      	bne.n	80047fc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2200      	movs	r2, #0
 8004894:	2140      	movs	r1, #64	; 0x40
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 f976 	bl	8004b88 <UART_WaitOnFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e006      	b.n	80048b4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e000      	b.n	80048b4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
  }
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3718      	adds	r7, #24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	4613      	mov	r3, r2
 80048c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d153      	bne.n	800497e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <HAL_UART_Transmit_DMA+0x26>
 80048dc:	88fb      	ldrh	r3, [r7, #6]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e04c      	b.n	8004980 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_UART_Transmit_DMA+0x38>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e045      	b.n	8004980 <HAL_UART_Transmit_DMA+0xc4>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	88fa      	ldrh	r2, [r7, #6]
 8004906:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	88fa      	ldrh	r2, [r7, #6]
 800490c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2221      	movs	r2, #33	; 0x21
 8004918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004920:	4a19      	ldr	r2, [pc, #100]	; (8004988 <HAL_UART_Transmit_DMA+0xcc>)
 8004922:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	4a18      	ldr	r2, [pc, #96]	; (800498c <HAL_UART_Transmit_DMA+0xd0>)
 800492a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	4a17      	ldr	r2, [pc, #92]	; (8004990 <HAL_UART_Transmit_DMA+0xd4>)
 8004932:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	2200      	movs	r2, #0
 800493a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800493c:	f107 0308 	add.w	r3, r7, #8
 8004940:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	6819      	ldr	r1, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3304      	adds	r3, #4
 8004950:	461a      	mov	r2, r3
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	f7fe f8ba 	bl	8002acc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004960:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695a      	ldr	r2, [r3, #20]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004978:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	e000      	b.n	8004980 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800497e:	2302      	movs	r3, #2
  }
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	08004a87 	.word	0x08004a87
 800498c:	08004ad9 	.word	0x08004ad9
 8004990:	08004af5 	.word	0x08004af5

08004994 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049aa:	2b80      	cmp	r3, #128	; 0x80
 80049ac:	bf0c      	ite	eq
 80049ae:	2301      	moveq	r3, #1
 80049b0:	2300      	movne	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b21      	cmp	r3, #33	; 0x21
 80049c0:	d116      	bne.n	80049f0 <HAL_UART_DMAStop+0x5c>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d013      	beq.n	80049f0 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695a      	ldr	r2, [r3, #20]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049d6:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d004      	beq.n	80049ea <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fe f8c9 	bl	8002b7c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f916 	bl	8004c1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fa:	2b40      	cmp	r3, #64	; 0x40
 80049fc:	bf0c      	ite	eq
 80049fe:	2301      	moveq	r3, #1
 8004a00:	2300      	movne	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b22      	cmp	r3, #34	; 0x22
 8004a10:	d116      	bne.n	8004a40 <HAL_UART_DMAStop+0xac>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d013      	beq.n	8004a40 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695a      	ldr	r2, [r3, #20]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a26:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d004      	beq.n	8004a3a <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe f8a1 	bl	8002b7c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f904 	bl	8004c48 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b084      	sub	sp, #16
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d113      	bne.n	8004aca <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695a      	ldr	r2, [r3, #20]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ab6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ac6:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ac8:	e002      	b.n	8004ad0 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7ff ffbd 	bl	8004a4a <HAL_UART_TxCpltCallback>
}
 8004ad0:	bf00      	nop
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f7ff ffb9 	bl	8004a5e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aec:	bf00      	nop
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b04:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b10:	2b80      	cmp	r3, #128	; 0x80
 8004b12:	bf0c      	ite	eq
 8004b14:	2301      	moveq	r3, #1
 8004b16:	2300      	movne	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b21      	cmp	r3, #33	; 0x21
 8004b26:	d108      	bne.n	8004b3a <UART_DMAError+0x46>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2200      	movs	r2, #0
 8004b32:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004b34:	68b8      	ldr	r0, [r7, #8]
 8004b36:	f000 f871 	bl	8004c1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b44:	2b40      	cmp	r3, #64	; 0x40
 8004b46:	bf0c      	ite	eq
 8004b48:	2301      	moveq	r3, #1
 8004b4a:	2300      	movne	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b22      	cmp	r3, #34	; 0x22
 8004b5a:	d108      	bne.n	8004b6e <UART_DMAError+0x7a>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2200      	movs	r2, #0
 8004b66:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004b68:	68b8      	ldr	r0, [r7, #8]
 8004b6a:	f000 f86d 	bl	8004c48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b72:	f043 0210 	orr.w	r2, r3, #16
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b7a:	68b8      	ldr	r0, [r7, #8]
 8004b7c:	f7ff ff79 	bl	8004a72 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b98:	e02c      	b.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba0:	d028      	beq.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ba8:	f7fc ff98 	bl	8001adc <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d21d      	bcs.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bc6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695a      	ldr	r2, [r3, #20]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0201 	bic.w	r2, r2, #1
 8004bd6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e00f      	b.n	8004c14 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	bf0c      	ite	eq
 8004c04:	2301      	moveq	r3, #1
 8004c06:	2300      	movne	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d0c3      	beq.n	8004b9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004c32:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c5e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695a      	ldr	r2, [r3, #20]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0201 	bic.w	r2, r2, #1
 8004c6e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c88:	b085      	sub	sp, #20
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004cc6:	f023 030c 	bic.w	r3, r3, #12
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6812      	ldr	r2, [r2, #0]
 8004cce:	68f9      	ldr	r1, [r7, #12]
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699a      	ldr	r2, [r3, #24]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf2:	f040 818b 	bne.w	800500c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4ac1      	ldr	r2, [pc, #772]	; (8005000 <UART_SetConfig+0x37c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d005      	beq.n	8004d0c <UART_SetConfig+0x88>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4abf      	ldr	r2, [pc, #764]	; (8005004 <UART_SetConfig+0x380>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	f040 80bd 	bne.w	8004e86 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d0c:	f7fe fcd8 	bl	80036c0 <HAL_RCC_GetPCLK2Freq>
 8004d10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	461d      	mov	r5, r3
 8004d16:	f04f 0600 	mov.w	r6, #0
 8004d1a:	46a8      	mov	r8, r5
 8004d1c:	46b1      	mov	r9, r6
 8004d1e:	eb18 0308 	adds.w	r3, r8, r8
 8004d22:	eb49 0409 	adc.w	r4, r9, r9
 8004d26:	4698      	mov	r8, r3
 8004d28:	46a1      	mov	r9, r4
 8004d2a:	eb18 0805 	adds.w	r8, r8, r5
 8004d2e:	eb49 0906 	adc.w	r9, r9, r6
 8004d32:	f04f 0100 	mov.w	r1, #0
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d46:	4688      	mov	r8, r1
 8004d48:	4691      	mov	r9, r2
 8004d4a:	eb18 0005 	adds.w	r0, r8, r5
 8004d4e:	eb49 0106 	adc.w	r1, r9, r6
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	461d      	mov	r5, r3
 8004d58:	f04f 0600 	mov.w	r6, #0
 8004d5c:	196b      	adds	r3, r5, r5
 8004d5e:	eb46 0406 	adc.w	r4, r6, r6
 8004d62:	461a      	mov	r2, r3
 8004d64:	4623      	mov	r3, r4
 8004d66:	f7fb fa4d 	bl	8000204 <__aeabi_uldivmod>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	460c      	mov	r4, r1
 8004d6e:	461a      	mov	r2, r3
 8004d70:	4ba5      	ldr	r3, [pc, #660]	; (8005008 <UART_SetConfig+0x384>)
 8004d72:	fba3 2302 	umull	r2, r3, r3, r2
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	461d      	mov	r5, r3
 8004d80:	f04f 0600 	mov.w	r6, #0
 8004d84:	46a9      	mov	r9, r5
 8004d86:	46b2      	mov	sl, r6
 8004d88:	eb19 0309 	adds.w	r3, r9, r9
 8004d8c:	eb4a 040a 	adc.w	r4, sl, sl
 8004d90:	4699      	mov	r9, r3
 8004d92:	46a2      	mov	sl, r4
 8004d94:	eb19 0905 	adds.w	r9, r9, r5
 8004d98:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d9c:	f04f 0100 	mov.w	r1, #0
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004da8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004dac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004db0:	4689      	mov	r9, r1
 8004db2:	4692      	mov	sl, r2
 8004db4:	eb19 0005 	adds.w	r0, r9, r5
 8004db8:	eb4a 0106 	adc.w	r1, sl, r6
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	461d      	mov	r5, r3
 8004dc2:	f04f 0600 	mov.w	r6, #0
 8004dc6:	196b      	adds	r3, r5, r5
 8004dc8:	eb46 0406 	adc.w	r4, r6, r6
 8004dcc:	461a      	mov	r2, r3
 8004dce:	4623      	mov	r3, r4
 8004dd0:	f7fb fa18 	bl	8000204 <__aeabi_uldivmod>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4b8b      	ldr	r3, [pc, #556]	; (8005008 <UART_SetConfig+0x384>)
 8004ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	2164      	movs	r1, #100	; 0x64
 8004de4:	fb01 f303 	mul.w	r3, r1, r3
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	3332      	adds	r3, #50	; 0x32
 8004dee:	4a86      	ldr	r2, [pc, #536]	; (8005008 <UART_SetConfig+0x384>)
 8004df0:	fba2 2303 	umull	r2, r3, r2, r3
 8004df4:	095b      	lsrs	r3, r3, #5
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004dfc:	4498      	add	r8, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	461d      	mov	r5, r3
 8004e02:	f04f 0600 	mov.w	r6, #0
 8004e06:	46a9      	mov	r9, r5
 8004e08:	46b2      	mov	sl, r6
 8004e0a:	eb19 0309 	adds.w	r3, r9, r9
 8004e0e:	eb4a 040a 	adc.w	r4, sl, sl
 8004e12:	4699      	mov	r9, r3
 8004e14:	46a2      	mov	sl, r4
 8004e16:	eb19 0905 	adds.w	r9, r9, r5
 8004e1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e1e:	f04f 0100 	mov.w	r1, #0
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e32:	4689      	mov	r9, r1
 8004e34:	4692      	mov	sl, r2
 8004e36:	eb19 0005 	adds.w	r0, r9, r5
 8004e3a:	eb4a 0106 	adc.w	r1, sl, r6
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	461d      	mov	r5, r3
 8004e44:	f04f 0600 	mov.w	r6, #0
 8004e48:	196b      	adds	r3, r5, r5
 8004e4a:	eb46 0406 	adc.w	r4, r6, r6
 8004e4e:	461a      	mov	r2, r3
 8004e50:	4623      	mov	r3, r4
 8004e52:	f7fb f9d7 	bl	8000204 <__aeabi_uldivmod>
 8004e56:	4603      	mov	r3, r0
 8004e58:	460c      	mov	r4, r1
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	4b6a      	ldr	r3, [pc, #424]	; (8005008 <UART_SetConfig+0x384>)
 8004e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	2164      	movs	r1, #100	; 0x64
 8004e66:	fb01 f303 	mul.w	r3, r1, r3
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	3332      	adds	r3, #50	; 0x32
 8004e70:	4a65      	ldr	r2, [pc, #404]	; (8005008 <UART_SetConfig+0x384>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	f003 0207 	and.w	r2, r3, #7
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4442      	add	r2, r8
 8004e82:	609a      	str	r2, [r3, #8]
 8004e84:	e26f      	b.n	8005366 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e86:	f7fe fc07 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8004e8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	461d      	mov	r5, r3
 8004e90:	f04f 0600 	mov.w	r6, #0
 8004e94:	46a8      	mov	r8, r5
 8004e96:	46b1      	mov	r9, r6
 8004e98:	eb18 0308 	adds.w	r3, r8, r8
 8004e9c:	eb49 0409 	adc.w	r4, r9, r9
 8004ea0:	4698      	mov	r8, r3
 8004ea2:	46a1      	mov	r9, r4
 8004ea4:	eb18 0805 	adds.w	r8, r8, r5
 8004ea8:	eb49 0906 	adc.w	r9, r9, r6
 8004eac:	f04f 0100 	mov.w	r1, #0
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004eb8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ebc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ec0:	4688      	mov	r8, r1
 8004ec2:	4691      	mov	r9, r2
 8004ec4:	eb18 0005 	adds.w	r0, r8, r5
 8004ec8:	eb49 0106 	adc.w	r1, r9, r6
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	461d      	mov	r5, r3
 8004ed2:	f04f 0600 	mov.w	r6, #0
 8004ed6:	196b      	adds	r3, r5, r5
 8004ed8:	eb46 0406 	adc.w	r4, r6, r6
 8004edc:	461a      	mov	r2, r3
 8004ede:	4623      	mov	r3, r4
 8004ee0:	f7fb f990 	bl	8000204 <__aeabi_uldivmod>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	461a      	mov	r2, r3
 8004eea:	4b47      	ldr	r3, [pc, #284]	; (8005008 <UART_SetConfig+0x384>)
 8004eec:	fba3 2302 	umull	r2, r3, r3, r2
 8004ef0:	095b      	lsrs	r3, r3, #5
 8004ef2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	461d      	mov	r5, r3
 8004efa:	f04f 0600 	mov.w	r6, #0
 8004efe:	46a9      	mov	r9, r5
 8004f00:	46b2      	mov	sl, r6
 8004f02:	eb19 0309 	adds.w	r3, r9, r9
 8004f06:	eb4a 040a 	adc.w	r4, sl, sl
 8004f0a:	4699      	mov	r9, r3
 8004f0c:	46a2      	mov	sl, r4
 8004f0e:	eb19 0905 	adds.w	r9, r9, r5
 8004f12:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f16:	f04f 0100 	mov.w	r1, #0
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f2a:	4689      	mov	r9, r1
 8004f2c:	4692      	mov	sl, r2
 8004f2e:	eb19 0005 	adds.w	r0, r9, r5
 8004f32:	eb4a 0106 	adc.w	r1, sl, r6
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	461d      	mov	r5, r3
 8004f3c:	f04f 0600 	mov.w	r6, #0
 8004f40:	196b      	adds	r3, r5, r5
 8004f42:	eb46 0406 	adc.w	r4, r6, r6
 8004f46:	461a      	mov	r2, r3
 8004f48:	4623      	mov	r3, r4
 8004f4a:	f7fb f95b 	bl	8000204 <__aeabi_uldivmod>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	460c      	mov	r4, r1
 8004f52:	461a      	mov	r2, r3
 8004f54:	4b2c      	ldr	r3, [pc, #176]	; (8005008 <UART_SetConfig+0x384>)
 8004f56:	fba3 1302 	umull	r1, r3, r3, r2
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	2164      	movs	r1, #100	; 0x64
 8004f5e:	fb01 f303 	mul.w	r3, r1, r3
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	3332      	adds	r3, #50	; 0x32
 8004f68:	4a27      	ldr	r2, [pc, #156]	; (8005008 <UART_SetConfig+0x384>)
 8004f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f76:	4498      	add	r8, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	461d      	mov	r5, r3
 8004f7c:	f04f 0600 	mov.w	r6, #0
 8004f80:	46a9      	mov	r9, r5
 8004f82:	46b2      	mov	sl, r6
 8004f84:	eb19 0309 	adds.w	r3, r9, r9
 8004f88:	eb4a 040a 	adc.w	r4, sl, sl
 8004f8c:	4699      	mov	r9, r3
 8004f8e:	46a2      	mov	sl, r4
 8004f90:	eb19 0905 	adds.w	r9, r9, r5
 8004f94:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f98:	f04f 0100 	mov.w	r1, #0
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fa4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fa8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fac:	4689      	mov	r9, r1
 8004fae:	4692      	mov	sl, r2
 8004fb0:	eb19 0005 	adds.w	r0, r9, r5
 8004fb4:	eb4a 0106 	adc.w	r1, sl, r6
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	461d      	mov	r5, r3
 8004fbe:	f04f 0600 	mov.w	r6, #0
 8004fc2:	196b      	adds	r3, r5, r5
 8004fc4:	eb46 0406 	adc.w	r4, r6, r6
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4623      	mov	r3, r4
 8004fcc:	f7fb f91a 	bl	8000204 <__aeabi_uldivmod>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	4b0c      	ldr	r3, [pc, #48]	; (8005008 <UART_SetConfig+0x384>)
 8004fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fdc:	095b      	lsrs	r3, r3, #5
 8004fde:	2164      	movs	r1, #100	; 0x64
 8004fe0:	fb01 f303 	mul.w	r3, r1, r3
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	3332      	adds	r3, #50	; 0x32
 8004fea:	4a07      	ldr	r2, [pc, #28]	; (8005008 <UART_SetConfig+0x384>)
 8004fec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	f003 0207 	and.w	r2, r3, #7
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4442      	add	r2, r8
 8004ffc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004ffe:	e1b2      	b.n	8005366 <UART_SetConfig+0x6e2>
 8005000:	40011000 	.word	0x40011000
 8005004:	40011400 	.word	0x40011400
 8005008:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4ad7      	ldr	r2, [pc, #860]	; (8005370 <UART_SetConfig+0x6ec>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d005      	beq.n	8005022 <UART_SetConfig+0x39e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4ad6      	ldr	r2, [pc, #856]	; (8005374 <UART_SetConfig+0x6f0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	f040 80d1 	bne.w	80051c4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005022:	f7fe fb4d 	bl	80036c0 <HAL_RCC_GetPCLK2Freq>
 8005026:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	469a      	mov	sl, r3
 800502c:	f04f 0b00 	mov.w	fp, #0
 8005030:	46d0      	mov	r8, sl
 8005032:	46d9      	mov	r9, fp
 8005034:	eb18 0308 	adds.w	r3, r8, r8
 8005038:	eb49 0409 	adc.w	r4, r9, r9
 800503c:	4698      	mov	r8, r3
 800503e:	46a1      	mov	r9, r4
 8005040:	eb18 080a 	adds.w	r8, r8, sl
 8005044:	eb49 090b 	adc.w	r9, r9, fp
 8005048:	f04f 0100 	mov.w	r1, #0
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005054:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005058:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800505c:	4688      	mov	r8, r1
 800505e:	4691      	mov	r9, r2
 8005060:	eb1a 0508 	adds.w	r5, sl, r8
 8005064:	eb4b 0609 	adc.w	r6, fp, r9
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	4619      	mov	r1, r3
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	f04f 0400 	mov.w	r4, #0
 800507a:	0094      	lsls	r4, r2, #2
 800507c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005080:	008b      	lsls	r3, r1, #2
 8005082:	461a      	mov	r2, r3
 8005084:	4623      	mov	r3, r4
 8005086:	4628      	mov	r0, r5
 8005088:	4631      	mov	r1, r6
 800508a:	f7fb f8bb 	bl	8000204 <__aeabi_uldivmod>
 800508e:	4603      	mov	r3, r0
 8005090:	460c      	mov	r4, r1
 8005092:	461a      	mov	r2, r3
 8005094:	4bb8      	ldr	r3, [pc, #736]	; (8005378 <UART_SetConfig+0x6f4>)
 8005096:	fba3 2302 	umull	r2, r3, r3, r2
 800509a:	095b      	lsrs	r3, r3, #5
 800509c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	469b      	mov	fp, r3
 80050a4:	f04f 0c00 	mov.w	ip, #0
 80050a8:	46d9      	mov	r9, fp
 80050aa:	46e2      	mov	sl, ip
 80050ac:	eb19 0309 	adds.w	r3, r9, r9
 80050b0:	eb4a 040a 	adc.w	r4, sl, sl
 80050b4:	4699      	mov	r9, r3
 80050b6:	46a2      	mov	sl, r4
 80050b8:	eb19 090b 	adds.w	r9, r9, fp
 80050bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80050c0:	f04f 0100 	mov.w	r1, #0
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050d4:	4689      	mov	r9, r1
 80050d6:	4692      	mov	sl, r2
 80050d8:	eb1b 0509 	adds.w	r5, fp, r9
 80050dc:	eb4c 060a 	adc.w	r6, ip, sl
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	4619      	mov	r1, r3
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	f04f 0400 	mov.w	r4, #0
 80050f2:	0094      	lsls	r4, r2, #2
 80050f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050f8:	008b      	lsls	r3, r1, #2
 80050fa:	461a      	mov	r2, r3
 80050fc:	4623      	mov	r3, r4
 80050fe:	4628      	mov	r0, r5
 8005100:	4631      	mov	r1, r6
 8005102:	f7fb f87f 	bl	8000204 <__aeabi_uldivmod>
 8005106:	4603      	mov	r3, r0
 8005108:	460c      	mov	r4, r1
 800510a:	461a      	mov	r2, r3
 800510c:	4b9a      	ldr	r3, [pc, #616]	; (8005378 <UART_SetConfig+0x6f4>)
 800510e:	fba3 1302 	umull	r1, r3, r3, r2
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	2164      	movs	r1, #100	; 0x64
 8005116:	fb01 f303 	mul.w	r3, r1, r3
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	3332      	adds	r3, #50	; 0x32
 8005120:	4a95      	ldr	r2, [pc, #596]	; (8005378 <UART_SetConfig+0x6f4>)
 8005122:	fba2 2303 	umull	r2, r3, r2, r3
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800512c:	4498      	add	r8, r3
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	469b      	mov	fp, r3
 8005132:	f04f 0c00 	mov.w	ip, #0
 8005136:	46d9      	mov	r9, fp
 8005138:	46e2      	mov	sl, ip
 800513a:	eb19 0309 	adds.w	r3, r9, r9
 800513e:	eb4a 040a 	adc.w	r4, sl, sl
 8005142:	4699      	mov	r9, r3
 8005144:	46a2      	mov	sl, r4
 8005146:	eb19 090b 	adds.w	r9, r9, fp
 800514a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800514e:	f04f 0100 	mov.w	r1, #0
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800515a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800515e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005162:	4689      	mov	r9, r1
 8005164:	4692      	mov	sl, r2
 8005166:	eb1b 0509 	adds.w	r5, fp, r9
 800516a:	eb4c 060a 	adc.w	r6, ip, sl
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	4619      	mov	r1, r3
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	f04f 0400 	mov.w	r4, #0
 8005180:	0094      	lsls	r4, r2, #2
 8005182:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005186:	008b      	lsls	r3, r1, #2
 8005188:	461a      	mov	r2, r3
 800518a:	4623      	mov	r3, r4
 800518c:	4628      	mov	r0, r5
 800518e:	4631      	mov	r1, r6
 8005190:	f7fb f838 	bl	8000204 <__aeabi_uldivmod>
 8005194:	4603      	mov	r3, r0
 8005196:	460c      	mov	r4, r1
 8005198:	461a      	mov	r2, r3
 800519a:	4b77      	ldr	r3, [pc, #476]	; (8005378 <UART_SetConfig+0x6f4>)
 800519c:	fba3 1302 	umull	r1, r3, r3, r2
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	2164      	movs	r1, #100	; 0x64
 80051a4:	fb01 f303 	mul.w	r3, r1, r3
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	3332      	adds	r3, #50	; 0x32
 80051ae:	4a72      	ldr	r2, [pc, #456]	; (8005378 <UART_SetConfig+0x6f4>)
 80051b0:	fba2 2303 	umull	r2, r3, r2, r3
 80051b4:	095b      	lsrs	r3, r3, #5
 80051b6:	f003 020f 	and.w	r2, r3, #15
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4442      	add	r2, r8
 80051c0:	609a      	str	r2, [r3, #8]
 80051c2:	e0d0      	b.n	8005366 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80051c4:	f7fe fa68 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 80051c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	469a      	mov	sl, r3
 80051ce:	f04f 0b00 	mov.w	fp, #0
 80051d2:	46d0      	mov	r8, sl
 80051d4:	46d9      	mov	r9, fp
 80051d6:	eb18 0308 	adds.w	r3, r8, r8
 80051da:	eb49 0409 	adc.w	r4, r9, r9
 80051de:	4698      	mov	r8, r3
 80051e0:	46a1      	mov	r9, r4
 80051e2:	eb18 080a 	adds.w	r8, r8, sl
 80051e6:	eb49 090b 	adc.w	r9, r9, fp
 80051ea:	f04f 0100 	mov.w	r1, #0
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80051f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80051fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80051fe:	4688      	mov	r8, r1
 8005200:	4691      	mov	r9, r2
 8005202:	eb1a 0508 	adds.w	r5, sl, r8
 8005206:	eb4b 0609 	adc.w	r6, fp, r9
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	4619      	mov	r1, r3
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	f04f 0400 	mov.w	r4, #0
 800521c:	0094      	lsls	r4, r2, #2
 800521e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005222:	008b      	lsls	r3, r1, #2
 8005224:	461a      	mov	r2, r3
 8005226:	4623      	mov	r3, r4
 8005228:	4628      	mov	r0, r5
 800522a:	4631      	mov	r1, r6
 800522c:	f7fa ffea 	bl	8000204 <__aeabi_uldivmod>
 8005230:	4603      	mov	r3, r0
 8005232:	460c      	mov	r4, r1
 8005234:	461a      	mov	r2, r3
 8005236:	4b50      	ldr	r3, [pc, #320]	; (8005378 <UART_SetConfig+0x6f4>)
 8005238:	fba3 2302 	umull	r2, r3, r3, r2
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	469b      	mov	fp, r3
 8005246:	f04f 0c00 	mov.w	ip, #0
 800524a:	46d9      	mov	r9, fp
 800524c:	46e2      	mov	sl, ip
 800524e:	eb19 0309 	adds.w	r3, r9, r9
 8005252:	eb4a 040a 	adc.w	r4, sl, sl
 8005256:	4699      	mov	r9, r3
 8005258:	46a2      	mov	sl, r4
 800525a:	eb19 090b 	adds.w	r9, r9, fp
 800525e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005262:	f04f 0100 	mov.w	r1, #0
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800526e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005272:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005276:	4689      	mov	r9, r1
 8005278:	4692      	mov	sl, r2
 800527a:	eb1b 0509 	adds.w	r5, fp, r9
 800527e:	eb4c 060a 	adc.w	r6, ip, sl
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	4619      	mov	r1, r3
 8005288:	f04f 0200 	mov.w	r2, #0
 800528c:	f04f 0300 	mov.w	r3, #0
 8005290:	f04f 0400 	mov.w	r4, #0
 8005294:	0094      	lsls	r4, r2, #2
 8005296:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800529a:	008b      	lsls	r3, r1, #2
 800529c:	461a      	mov	r2, r3
 800529e:	4623      	mov	r3, r4
 80052a0:	4628      	mov	r0, r5
 80052a2:	4631      	mov	r1, r6
 80052a4:	f7fa ffae 	bl	8000204 <__aeabi_uldivmod>
 80052a8:	4603      	mov	r3, r0
 80052aa:	460c      	mov	r4, r1
 80052ac:	461a      	mov	r2, r3
 80052ae:	4b32      	ldr	r3, [pc, #200]	; (8005378 <UART_SetConfig+0x6f4>)
 80052b0:	fba3 1302 	umull	r1, r3, r3, r2
 80052b4:	095b      	lsrs	r3, r3, #5
 80052b6:	2164      	movs	r1, #100	; 0x64
 80052b8:	fb01 f303 	mul.w	r3, r1, r3
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	3332      	adds	r3, #50	; 0x32
 80052c2:	4a2d      	ldr	r2, [pc, #180]	; (8005378 <UART_SetConfig+0x6f4>)
 80052c4:	fba2 2303 	umull	r2, r3, r2, r3
 80052c8:	095b      	lsrs	r3, r3, #5
 80052ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ce:	4498      	add	r8, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	469b      	mov	fp, r3
 80052d4:	f04f 0c00 	mov.w	ip, #0
 80052d8:	46d9      	mov	r9, fp
 80052da:	46e2      	mov	sl, ip
 80052dc:	eb19 0309 	adds.w	r3, r9, r9
 80052e0:	eb4a 040a 	adc.w	r4, sl, sl
 80052e4:	4699      	mov	r9, r3
 80052e6:	46a2      	mov	sl, r4
 80052e8:	eb19 090b 	adds.w	r9, r9, fp
 80052ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052f0:	f04f 0100 	mov.w	r1, #0
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005300:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005304:	4689      	mov	r9, r1
 8005306:	4692      	mov	sl, r2
 8005308:	eb1b 0509 	adds.w	r5, fp, r9
 800530c:	eb4c 060a 	adc.w	r6, ip, sl
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	4619      	mov	r1, r3
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	f04f 0300 	mov.w	r3, #0
 800531e:	f04f 0400 	mov.w	r4, #0
 8005322:	0094      	lsls	r4, r2, #2
 8005324:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005328:	008b      	lsls	r3, r1, #2
 800532a:	461a      	mov	r2, r3
 800532c:	4623      	mov	r3, r4
 800532e:	4628      	mov	r0, r5
 8005330:	4631      	mov	r1, r6
 8005332:	f7fa ff67 	bl	8000204 <__aeabi_uldivmod>
 8005336:	4603      	mov	r3, r0
 8005338:	460c      	mov	r4, r1
 800533a:	461a      	mov	r2, r3
 800533c:	4b0e      	ldr	r3, [pc, #56]	; (8005378 <UART_SetConfig+0x6f4>)
 800533e:	fba3 1302 	umull	r1, r3, r3, r2
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	2164      	movs	r1, #100	; 0x64
 8005346:	fb01 f303 	mul.w	r3, r1, r3
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	3332      	adds	r3, #50	; 0x32
 8005350:	4a09      	ldr	r2, [pc, #36]	; (8005378 <UART_SetConfig+0x6f4>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	f003 020f 	and.w	r2, r3, #15
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4442      	add	r2, r8
 8005362:	609a      	str	r2, [r3, #8]
}
 8005364:	e7ff      	b.n	8005366 <UART_SetConfig+0x6e2>
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005370:	40011000 	.word	0x40011000
 8005374:	40011400 	.word	0x40011400
 8005378:	51eb851f 	.word	0x51eb851f

0800537c <__libc_init_array>:
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	4e0d      	ldr	r6, [pc, #52]	; (80053b4 <__libc_init_array+0x38>)
 8005380:	4c0d      	ldr	r4, [pc, #52]	; (80053b8 <__libc_init_array+0x3c>)
 8005382:	1ba4      	subs	r4, r4, r6
 8005384:	10a4      	asrs	r4, r4, #2
 8005386:	2500      	movs	r5, #0
 8005388:	42a5      	cmp	r5, r4
 800538a:	d109      	bne.n	80053a0 <__libc_init_array+0x24>
 800538c:	4e0b      	ldr	r6, [pc, #44]	; (80053bc <__libc_init_array+0x40>)
 800538e:	4c0c      	ldr	r4, [pc, #48]	; (80053c0 <__libc_init_array+0x44>)
 8005390:	f000 fd6c 	bl	8005e6c <_init>
 8005394:	1ba4      	subs	r4, r4, r6
 8005396:	10a4      	asrs	r4, r4, #2
 8005398:	2500      	movs	r5, #0
 800539a:	42a5      	cmp	r5, r4
 800539c:	d105      	bne.n	80053aa <__libc_init_array+0x2e>
 800539e:	bd70      	pop	{r4, r5, r6, pc}
 80053a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053a4:	4798      	blx	r3
 80053a6:	3501      	adds	r5, #1
 80053a8:	e7ee      	b.n	8005388 <__libc_init_array+0xc>
 80053aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053ae:	4798      	blx	r3
 80053b0:	3501      	adds	r5, #1
 80053b2:	e7f2      	b.n	800539a <__libc_init_array+0x1e>
 80053b4:	080062ac 	.word	0x080062ac
 80053b8:	080062ac 	.word	0x080062ac
 80053bc:	080062ac 	.word	0x080062ac
 80053c0:	080062b0 	.word	0x080062b0

080053c4 <memset>:
 80053c4:	4402      	add	r2, r0
 80053c6:	4603      	mov	r3, r0
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d100      	bne.n	80053ce <memset+0xa>
 80053cc:	4770      	bx	lr
 80053ce:	f803 1b01 	strb.w	r1, [r3], #1
 80053d2:	e7f9      	b.n	80053c8 <memset+0x4>

080053d4 <sinf>:
 80053d4:	ee10 3a10 	vmov	r3, s0
 80053d8:	b507      	push	{r0, r1, r2, lr}
 80053da:	4a1d      	ldr	r2, [pc, #116]	; (8005450 <sinf+0x7c>)
 80053dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053e0:	4293      	cmp	r3, r2
 80053e2:	dc05      	bgt.n	80053f0 <sinf+0x1c>
 80053e4:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8005454 <sinf+0x80>
 80053e8:	2000      	movs	r0, #0
 80053ea:	f000 fc41 	bl	8005c70 <__kernel_sinf>
 80053ee:	e004      	b.n	80053fa <sinf+0x26>
 80053f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80053f4:	db04      	blt.n	8005400 <sinf+0x2c>
 80053f6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80053fa:	b003      	add	sp, #12
 80053fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8005400:	4668      	mov	r0, sp
 8005402:	f000 f829 	bl	8005458 <__ieee754_rem_pio2f>
 8005406:	f000 0003 	and.w	r0, r0, #3
 800540a:	2801      	cmp	r0, #1
 800540c:	d008      	beq.n	8005420 <sinf+0x4c>
 800540e:	2802      	cmp	r0, #2
 8005410:	d00d      	beq.n	800542e <sinf+0x5a>
 8005412:	b9b0      	cbnz	r0, 8005442 <sinf+0x6e>
 8005414:	2001      	movs	r0, #1
 8005416:	eddd 0a01 	vldr	s1, [sp, #4]
 800541a:	ed9d 0a00 	vldr	s0, [sp]
 800541e:	e7e4      	b.n	80053ea <sinf+0x16>
 8005420:	eddd 0a01 	vldr	s1, [sp, #4]
 8005424:	ed9d 0a00 	vldr	s0, [sp]
 8005428:	f000 f942 	bl	80056b0 <__kernel_cosf>
 800542c:	e7e5      	b.n	80053fa <sinf+0x26>
 800542e:	2001      	movs	r0, #1
 8005430:	eddd 0a01 	vldr	s1, [sp, #4]
 8005434:	ed9d 0a00 	vldr	s0, [sp]
 8005438:	f000 fc1a 	bl	8005c70 <__kernel_sinf>
 800543c:	eeb1 0a40 	vneg.f32	s0, s0
 8005440:	e7db      	b.n	80053fa <sinf+0x26>
 8005442:	eddd 0a01 	vldr	s1, [sp, #4]
 8005446:	ed9d 0a00 	vldr	s0, [sp]
 800544a:	f000 f931 	bl	80056b0 <__kernel_cosf>
 800544e:	e7f5      	b.n	800543c <sinf+0x68>
 8005450:	3f490fd8 	.word	0x3f490fd8
 8005454:	00000000 	.word	0x00000000

08005458 <__ieee754_rem_pio2f>:
 8005458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800545a:	ee10 6a10 	vmov	r6, s0
 800545e:	4b86      	ldr	r3, [pc, #536]	; (8005678 <__ieee754_rem_pio2f+0x220>)
 8005460:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8005464:	429c      	cmp	r4, r3
 8005466:	b087      	sub	sp, #28
 8005468:	4605      	mov	r5, r0
 800546a:	dc05      	bgt.n	8005478 <__ieee754_rem_pio2f+0x20>
 800546c:	2300      	movs	r3, #0
 800546e:	ed85 0a00 	vstr	s0, [r5]
 8005472:	6043      	str	r3, [r0, #4]
 8005474:	2000      	movs	r0, #0
 8005476:	e020      	b.n	80054ba <__ieee754_rem_pio2f+0x62>
 8005478:	4b80      	ldr	r3, [pc, #512]	; (800567c <__ieee754_rem_pio2f+0x224>)
 800547a:	429c      	cmp	r4, r3
 800547c:	dc38      	bgt.n	80054f0 <__ieee754_rem_pio2f+0x98>
 800547e:	2e00      	cmp	r6, #0
 8005480:	f024 040f 	bic.w	r4, r4, #15
 8005484:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005680 <__ieee754_rem_pio2f+0x228>
 8005488:	4b7e      	ldr	r3, [pc, #504]	; (8005684 <__ieee754_rem_pio2f+0x22c>)
 800548a:	dd18      	ble.n	80054be <__ieee754_rem_pio2f+0x66>
 800548c:	429c      	cmp	r4, r3
 800548e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8005492:	bf09      	itett	eq
 8005494:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8005688 <__ieee754_rem_pio2f+0x230>
 8005498:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800568c <__ieee754_rem_pio2f+0x234>
 800549c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80054a0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8005690 <__ieee754_rem_pio2f+0x238>
 80054a4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80054a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80054ac:	edc0 6a00 	vstr	s13, [r0]
 80054b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054b4:	edc0 7a01 	vstr	s15, [r0, #4]
 80054b8:	2001      	movs	r0, #1
 80054ba:	b007      	add	sp, #28
 80054bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054be:	429c      	cmp	r4, r3
 80054c0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80054c4:	bf09      	itett	eq
 80054c6:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8005688 <__ieee754_rem_pio2f+0x230>
 80054ca:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800568c <__ieee754_rem_pio2f+0x234>
 80054ce:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80054d2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8005690 <__ieee754_rem_pio2f+0x238>
 80054d6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80054da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80054de:	edc0 6a00 	vstr	s13, [r0]
 80054e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054e6:	edc0 7a01 	vstr	s15, [r0, #4]
 80054ea:	f04f 30ff 	mov.w	r0, #4294967295
 80054ee:	e7e4      	b.n	80054ba <__ieee754_rem_pio2f+0x62>
 80054f0:	4b68      	ldr	r3, [pc, #416]	; (8005694 <__ieee754_rem_pio2f+0x23c>)
 80054f2:	429c      	cmp	r4, r3
 80054f4:	dc71      	bgt.n	80055da <__ieee754_rem_pio2f+0x182>
 80054f6:	f000 fc03 	bl	8005d00 <fabsf>
 80054fa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8005698 <__ieee754_rem_pio2f+0x240>
 80054fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005502:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800550a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800550e:	ee17 0a90 	vmov	r0, s15
 8005512:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8005680 <__ieee754_rem_pio2f+0x228>
 8005516:	eeb1 7a46 	vneg.f32	s14, s12
 800551a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800551e:	281f      	cmp	r0, #31
 8005520:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800568c <__ieee754_rem_pio2f+0x234>
 8005524:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005528:	ee70 6a67 	vsub.f32	s13, s0, s15
 800552c:	ee16 3a90 	vmov	r3, s13
 8005530:	dc1c      	bgt.n	800556c <__ieee754_rem_pio2f+0x114>
 8005532:	1e47      	subs	r7, r0, #1
 8005534:	4959      	ldr	r1, [pc, #356]	; (800569c <__ieee754_rem_pio2f+0x244>)
 8005536:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800553a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800553e:	428a      	cmp	r2, r1
 8005540:	d014      	beq.n	800556c <__ieee754_rem_pio2f+0x114>
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	ed95 7a00 	vldr	s14, [r5]
 8005548:	ee30 0a47 	vsub.f32	s0, s0, s14
 800554c:	2e00      	cmp	r6, #0
 800554e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005552:	ed85 0a01 	vstr	s0, [r5, #4]
 8005556:	dab0      	bge.n	80054ba <__ieee754_rem_pio2f+0x62>
 8005558:	eeb1 7a47 	vneg.f32	s14, s14
 800555c:	eeb1 0a40 	vneg.f32	s0, s0
 8005560:	ed85 7a00 	vstr	s14, [r5]
 8005564:	ed85 0a01 	vstr	s0, [r5, #4]
 8005568:	4240      	negs	r0, r0
 800556a:	e7a6      	b.n	80054ba <__ieee754_rem_pio2f+0x62>
 800556c:	15e4      	asrs	r4, r4, #23
 800556e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005572:	1aa2      	subs	r2, r4, r2
 8005574:	2a08      	cmp	r2, #8
 8005576:	dde4      	ble.n	8005542 <__ieee754_rem_pio2f+0xea>
 8005578:	eddf 7a43 	vldr	s15, [pc, #268]	; 8005688 <__ieee754_rem_pio2f+0x230>
 800557c:	eef0 6a40 	vmov.f32	s13, s0
 8005580:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005584:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005588:	eea7 0a27 	vfma.f32	s0, s14, s15
 800558c:	eddf 7a40 	vldr	s15, [pc, #256]	; 8005690 <__ieee754_rem_pio2f+0x238>
 8005590:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8005594:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8005598:	eef0 7a40 	vmov.f32	s15, s0
 800559c:	ee15 3a90 	vmov	r3, s11
 80055a0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80055a4:	1aa4      	subs	r4, r4, r2
 80055a6:	2c19      	cmp	r4, #25
 80055a8:	dc04      	bgt.n	80055b4 <__ieee754_rem_pio2f+0x15c>
 80055aa:	edc5 5a00 	vstr	s11, [r5]
 80055ae:	eeb0 0a66 	vmov.f32	s0, s13
 80055b2:	e7c7      	b.n	8005544 <__ieee754_rem_pio2f+0xec>
 80055b4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80056a0 <__ieee754_rem_pio2f+0x248>
 80055b8:	eeb0 0a66 	vmov.f32	s0, s13
 80055bc:	eea7 0a25 	vfma.f32	s0, s14, s11
 80055c0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80055c4:	eee7 7a25 	vfma.f32	s15, s14, s11
 80055c8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80056a4 <__ieee754_rem_pio2f+0x24c>
 80055cc:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80055d0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80055d4:	ed85 7a00 	vstr	s14, [r5]
 80055d8:	e7b4      	b.n	8005544 <__ieee754_rem_pio2f+0xec>
 80055da:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80055de:	db06      	blt.n	80055ee <__ieee754_rem_pio2f+0x196>
 80055e0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80055e4:	edc0 7a01 	vstr	s15, [r0, #4]
 80055e8:	edc0 7a00 	vstr	s15, [r0]
 80055ec:	e742      	b.n	8005474 <__ieee754_rem_pio2f+0x1c>
 80055ee:	15e2      	asrs	r2, r4, #23
 80055f0:	3a86      	subs	r2, #134	; 0x86
 80055f2:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80055f6:	ee07 3a90 	vmov	s15, r3
 80055fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80055fe:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80056a8 <__ieee754_rem_pio2f+0x250>
 8005602:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005606:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800560a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800560e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005612:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005616:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800561a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800561e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005622:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005626:	eef5 7a40 	vcmp.f32	s15, #0.0
 800562a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800562e:	edcd 7a05 	vstr	s15, [sp, #20]
 8005632:	d11e      	bne.n	8005672 <__ieee754_rem_pio2f+0x21a>
 8005634:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563c:	bf0c      	ite	eq
 800563e:	2301      	moveq	r3, #1
 8005640:	2302      	movne	r3, #2
 8005642:	491a      	ldr	r1, [pc, #104]	; (80056ac <__ieee754_rem_pio2f+0x254>)
 8005644:	9101      	str	r1, [sp, #4]
 8005646:	2102      	movs	r1, #2
 8005648:	9100      	str	r1, [sp, #0]
 800564a:	a803      	add	r0, sp, #12
 800564c:	4629      	mov	r1, r5
 800564e:	f000 f88d 	bl	800576c <__kernel_rem_pio2f>
 8005652:	2e00      	cmp	r6, #0
 8005654:	f6bf af31 	bge.w	80054ba <__ieee754_rem_pio2f+0x62>
 8005658:	edd5 7a00 	vldr	s15, [r5]
 800565c:	eef1 7a67 	vneg.f32	s15, s15
 8005660:	edc5 7a00 	vstr	s15, [r5]
 8005664:	edd5 7a01 	vldr	s15, [r5, #4]
 8005668:	eef1 7a67 	vneg.f32	s15, s15
 800566c:	edc5 7a01 	vstr	s15, [r5, #4]
 8005670:	e77a      	b.n	8005568 <__ieee754_rem_pio2f+0x110>
 8005672:	2303      	movs	r3, #3
 8005674:	e7e5      	b.n	8005642 <__ieee754_rem_pio2f+0x1ea>
 8005676:	bf00      	nop
 8005678:	3f490fd8 	.word	0x3f490fd8
 800567c:	4016cbe3 	.word	0x4016cbe3
 8005680:	3fc90f80 	.word	0x3fc90f80
 8005684:	3fc90fd0 	.word	0x3fc90fd0
 8005688:	37354400 	.word	0x37354400
 800568c:	37354443 	.word	0x37354443
 8005690:	2e85a308 	.word	0x2e85a308
 8005694:	43490f80 	.word	0x43490f80
 8005698:	3f22f984 	.word	0x3f22f984
 800569c:	08005ed4 	.word	0x08005ed4
 80056a0:	2e85a300 	.word	0x2e85a300
 80056a4:	248d3132 	.word	0x248d3132
 80056a8:	43800000 	.word	0x43800000
 80056ac:	08005f54 	.word	0x08005f54

080056b0 <__kernel_cosf>:
 80056b0:	ee10 3a10 	vmov	r3, s0
 80056b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056b8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80056bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056c0:	da05      	bge.n	80056ce <__kernel_cosf+0x1e>
 80056c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80056c6:	ee17 2a90 	vmov	r2, s15
 80056ca:	2a00      	cmp	r2, #0
 80056cc:	d03b      	beq.n	8005746 <__kernel_cosf+0x96>
 80056ce:	ee20 6a00 	vmul.f32	s12, s0, s0
 80056d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80056d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800574c <__kernel_cosf+0x9c>
 80056da:	4a1d      	ldr	r2, [pc, #116]	; (8005750 <__kernel_cosf+0xa0>)
 80056dc:	ee66 7a07 	vmul.f32	s15, s12, s14
 80056e0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005754 <__kernel_cosf+0xa4>
 80056e4:	eea6 7a25 	vfma.f32	s14, s12, s11
 80056e8:	4293      	cmp	r3, r2
 80056ea:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8005758 <__kernel_cosf+0xa8>
 80056ee:	eee7 5a06 	vfma.f32	s11, s14, s12
 80056f2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800575c <__kernel_cosf+0xac>
 80056f6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80056fa:	eddf 5a19 	vldr	s11, [pc, #100]	; 8005760 <__kernel_cosf+0xb0>
 80056fe:	eee7 5a06 	vfma.f32	s11, s14, s12
 8005702:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005764 <__kernel_cosf+0xb4>
 8005706:	eea5 7a86 	vfma.f32	s14, s11, s12
 800570a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800570e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8005712:	eee6 0a07 	vfma.f32	s1, s12, s14
 8005716:	dc04      	bgt.n	8005722 <__kernel_cosf+0x72>
 8005718:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800571c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8005720:	4770      	bx	lr
 8005722:	4a11      	ldr	r2, [pc, #68]	; (8005768 <__kernel_cosf+0xb8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	bfda      	itte	le
 8005728:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800572c:	ee07 3a10 	vmovle	s14, r3
 8005730:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8005734:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005738:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800573c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005740:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005744:	4770      	bx	lr
 8005746:	eeb0 0a66 	vmov.f32	s0, s13
 800574a:	4770      	bx	lr
 800574c:	ad47d74e 	.word	0xad47d74e
 8005750:	3e999999 	.word	0x3e999999
 8005754:	310f74f6 	.word	0x310f74f6
 8005758:	b493f27c 	.word	0xb493f27c
 800575c:	37d00d01 	.word	0x37d00d01
 8005760:	bab60b61 	.word	0xbab60b61
 8005764:	3d2aaaab 	.word	0x3d2aaaab
 8005768:	3f480000 	.word	0x3f480000

0800576c <__kernel_rem_pio2f>:
 800576c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005770:	ed2d 8b04 	vpush	{d8-d9}
 8005774:	b0d7      	sub	sp, #348	; 0x15c
 8005776:	469b      	mov	fp, r3
 8005778:	460e      	mov	r6, r1
 800577a:	4bbe      	ldr	r3, [pc, #760]	; (8005a74 <__kernel_rem_pio2f+0x308>)
 800577c:	9964      	ldr	r1, [sp, #400]	; 0x190
 800577e:	9002      	str	r0, [sp, #8]
 8005780:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8005784:	9865      	ldr	r0, [sp, #404]	; 0x194
 8005786:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8005a84 <__kernel_rem_pio2f+0x318>
 800578a:	1ed1      	subs	r1, r2, #3
 800578c:	2308      	movs	r3, #8
 800578e:	fb91 f1f3 	sdiv	r1, r1, r3
 8005792:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8005796:	f10b 3aff 	add.w	sl, fp, #4294967295
 800579a:	1c4c      	adds	r4, r1, #1
 800579c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 80057a0:	eba1 050a 	sub.w	r5, r1, sl
 80057a4:	aa1a      	add	r2, sp, #104	; 0x68
 80057a6:	eb09 070a 	add.w	r7, r9, sl
 80057aa:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80057ae:	4696      	mov	lr, r2
 80057b0:	2300      	movs	r3, #0
 80057b2:	42bb      	cmp	r3, r7
 80057b4:	dd0f      	ble.n	80057d6 <__kernel_rem_pio2f+0x6a>
 80057b6:	af42      	add	r7, sp, #264	; 0x108
 80057b8:	2200      	movs	r2, #0
 80057ba:	454a      	cmp	r2, r9
 80057bc:	dc27      	bgt.n	800580e <__kernel_rem_pio2f+0xa2>
 80057be:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80057c2:	eb0b 0302 	add.w	r3, fp, r2
 80057c6:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80057ca:	9d02      	ldr	r5, [sp, #8]
 80057cc:	eddf 7aad 	vldr	s15, [pc, #692]	; 8005a84 <__kernel_rem_pio2f+0x318>
 80057d0:	f04f 0c00 	mov.w	ip, #0
 80057d4:	e015      	b.n	8005802 <__kernel_rem_pio2f+0x96>
 80057d6:	42dd      	cmn	r5, r3
 80057d8:	bf5d      	ittte	pl
 80057da:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80057de:	ee07 2a90 	vmovpl	s15, r2
 80057e2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80057e6:	eef0 7a47 	vmovmi.f32	s15, s14
 80057ea:	ecee 7a01 	vstmia	lr!, {s15}
 80057ee:	3301      	adds	r3, #1
 80057f0:	e7df      	b.n	80057b2 <__kernel_rem_pio2f+0x46>
 80057f2:	ecf5 6a01 	vldmia	r5!, {s13}
 80057f6:	ed33 7a01 	vldmdb	r3!, {s14}
 80057fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80057fe:	f10c 0c01 	add.w	ip, ip, #1
 8005802:	45d4      	cmp	ip, sl
 8005804:	ddf5      	ble.n	80057f2 <__kernel_rem_pio2f+0x86>
 8005806:	ece7 7a01 	vstmia	r7!, {s15}
 800580a:	3201      	adds	r2, #1
 800580c:	e7d5      	b.n	80057ba <__kernel_rem_pio2f+0x4e>
 800580e:	ab06      	add	r3, sp, #24
 8005810:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8005814:	9304      	str	r3, [sp, #16]
 8005816:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8005a80 <__kernel_rem_pio2f+0x314>
 800581a:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8005a7c <__kernel_rem_pio2f+0x310>
 800581e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8005822:	9303      	str	r3, [sp, #12]
 8005824:	464d      	mov	r5, r9
 8005826:	ab56      	add	r3, sp, #344	; 0x158
 8005828:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800582c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8005830:	3f01      	subs	r7, #1
 8005832:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8005836:	00bf      	lsls	r7, r7, #2
 8005838:	ab56      	add	r3, sp, #344	; 0x158
 800583a:	19da      	adds	r2, r3, r7
 800583c:	3a4c      	subs	r2, #76	; 0x4c
 800583e:	2300      	movs	r3, #0
 8005840:	1ae9      	subs	r1, r5, r3
 8005842:	2900      	cmp	r1, #0
 8005844:	dc4c      	bgt.n	80058e0 <__kernel_rem_pio2f+0x174>
 8005846:	4620      	mov	r0, r4
 8005848:	f000 faa4 	bl	8005d94 <scalbnf>
 800584c:	eeb0 8a40 	vmov.f32	s16, s0
 8005850:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8005854:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005858:	f000 fa5a 	bl	8005d10 <floorf>
 800585c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8005860:	eea0 8a67 	vfms.f32	s16, s0, s15
 8005864:	2c00      	cmp	r4, #0
 8005866:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800586a:	edcd 7a01 	vstr	s15, [sp, #4]
 800586e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005872:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005876:	dd48      	ble.n	800590a <__kernel_rem_pio2f+0x19e>
 8005878:	1e69      	subs	r1, r5, #1
 800587a:	ab06      	add	r3, sp, #24
 800587c:	f1c4 0008 	rsb	r0, r4, #8
 8005880:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8005884:	9a01      	ldr	r2, [sp, #4]
 8005886:	fa4c f300 	asr.w	r3, ip, r0
 800588a:	441a      	add	r2, r3
 800588c:	4083      	lsls	r3, r0
 800588e:	9201      	str	r2, [sp, #4]
 8005890:	ebac 0203 	sub.w	r2, ip, r3
 8005894:	ab06      	add	r3, sp, #24
 8005896:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800589a:	f1c4 0307 	rsb	r3, r4, #7
 800589e:	fa42 f803 	asr.w	r8, r2, r3
 80058a2:	f1b8 0f00 	cmp.w	r8, #0
 80058a6:	dd41      	ble.n	800592c <__kernel_rem_pio2f+0x1c0>
 80058a8:	9b01      	ldr	r3, [sp, #4]
 80058aa:	2000      	movs	r0, #0
 80058ac:	3301      	adds	r3, #1
 80058ae:	9301      	str	r3, [sp, #4]
 80058b0:	4601      	mov	r1, r0
 80058b2:	4285      	cmp	r5, r0
 80058b4:	dc6d      	bgt.n	8005992 <__kernel_rem_pio2f+0x226>
 80058b6:	2c00      	cmp	r4, #0
 80058b8:	dd04      	ble.n	80058c4 <__kernel_rem_pio2f+0x158>
 80058ba:	2c01      	cmp	r4, #1
 80058bc:	d07e      	beq.n	80059bc <__kernel_rem_pio2f+0x250>
 80058be:	2c02      	cmp	r4, #2
 80058c0:	f000 8086 	beq.w	80059d0 <__kernel_rem_pio2f+0x264>
 80058c4:	f1b8 0f02 	cmp.w	r8, #2
 80058c8:	d130      	bne.n	800592c <__kernel_rem_pio2f+0x1c0>
 80058ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80058ce:	ee30 8a48 	vsub.f32	s16, s0, s16
 80058d2:	b359      	cbz	r1, 800592c <__kernel_rem_pio2f+0x1c0>
 80058d4:	4620      	mov	r0, r4
 80058d6:	f000 fa5d 	bl	8005d94 <scalbnf>
 80058da:	ee38 8a40 	vsub.f32	s16, s16, s0
 80058de:	e025      	b.n	800592c <__kernel_rem_pio2f+0x1c0>
 80058e0:	ee60 7a28 	vmul.f32	s15, s0, s17
 80058e4:	a806      	add	r0, sp, #24
 80058e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058ee:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80058f2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80058f6:	ee10 1a10 	vmov	r1, s0
 80058fa:	ed32 0a01 	vldmdb	r2!, {s0}
 80058fe:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8005902:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005906:	3301      	adds	r3, #1
 8005908:	e79a      	b.n	8005840 <__kernel_rem_pio2f+0xd4>
 800590a:	d106      	bne.n	800591a <__kernel_rem_pio2f+0x1ae>
 800590c:	1e6b      	subs	r3, r5, #1
 800590e:	aa06      	add	r2, sp, #24
 8005910:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005914:	ea4f 2822 	mov.w	r8, r2, asr #8
 8005918:	e7c3      	b.n	80058a2 <__kernel_rem_pio2f+0x136>
 800591a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800591e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005926:	da31      	bge.n	800598c <__kernel_rem_pio2f+0x220>
 8005928:	f04f 0800 	mov.w	r8, #0
 800592c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005934:	f040 80a8 	bne.w	8005a88 <__kernel_rem_pio2f+0x31c>
 8005938:	1e6b      	subs	r3, r5, #1
 800593a:	4618      	mov	r0, r3
 800593c:	2200      	movs	r2, #0
 800593e:	4548      	cmp	r0, r9
 8005940:	da4d      	bge.n	80059de <__kernel_rem_pio2f+0x272>
 8005942:	2a00      	cmp	r2, #0
 8005944:	f000 8087 	beq.w	8005a56 <__kernel_rem_pio2f+0x2ea>
 8005948:	aa06      	add	r2, sp, #24
 800594a:	3c08      	subs	r4, #8
 800594c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005950:	2900      	cmp	r1, #0
 8005952:	f000 808d 	beq.w	8005a70 <__kernel_rem_pio2f+0x304>
 8005956:	4620      	mov	r0, r4
 8005958:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800595c:	9302      	str	r3, [sp, #8]
 800595e:	f000 fa19 	bl	8005d94 <scalbnf>
 8005962:	9b02      	ldr	r3, [sp, #8]
 8005964:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8005a80 <__kernel_rem_pio2f+0x314>
 8005968:	0099      	lsls	r1, r3, #2
 800596a:	aa42      	add	r2, sp, #264	; 0x108
 800596c:	1850      	adds	r0, r2, r1
 800596e:	1d05      	adds	r5, r0, #4
 8005970:	461c      	mov	r4, r3
 8005972:	2c00      	cmp	r4, #0
 8005974:	f280 80b8 	bge.w	8005ae8 <__kernel_rem_pio2f+0x37c>
 8005978:	2500      	movs	r5, #0
 800597a:	1b5c      	subs	r4, r3, r5
 800597c:	2c00      	cmp	r4, #0
 800597e:	f2c0 80d8 	blt.w	8005b32 <__kernel_rem_pio2f+0x3c6>
 8005982:	4f3d      	ldr	r7, [pc, #244]	; (8005a78 <__kernel_rem_pio2f+0x30c>)
 8005984:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8005a84 <__kernel_rem_pio2f+0x318>
 8005988:	2400      	movs	r4, #0
 800598a:	e0c6      	b.n	8005b1a <__kernel_rem_pio2f+0x3ae>
 800598c:	f04f 0802 	mov.w	r8, #2
 8005990:	e78a      	b.n	80058a8 <__kernel_rem_pio2f+0x13c>
 8005992:	ab06      	add	r3, sp, #24
 8005994:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005998:	b949      	cbnz	r1, 80059ae <__kernel_rem_pio2f+0x242>
 800599a:	b12b      	cbz	r3, 80059a8 <__kernel_rem_pio2f+0x23c>
 800599c:	aa06      	add	r2, sp, #24
 800599e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80059a2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80059a6:	2301      	movs	r3, #1
 80059a8:	3001      	adds	r0, #1
 80059aa:	4619      	mov	r1, r3
 80059ac:	e781      	b.n	80058b2 <__kernel_rem_pio2f+0x146>
 80059ae:	aa06      	add	r2, sp, #24
 80059b0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80059b4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80059b8:	460b      	mov	r3, r1
 80059ba:	e7f5      	b.n	80059a8 <__kernel_rem_pio2f+0x23c>
 80059bc:	1e68      	subs	r0, r5, #1
 80059be:	ab06      	add	r3, sp, #24
 80059c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80059c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059c8:	aa06      	add	r2, sp, #24
 80059ca:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80059ce:	e779      	b.n	80058c4 <__kernel_rem_pio2f+0x158>
 80059d0:	1e68      	subs	r0, r5, #1
 80059d2:	ab06      	add	r3, sp, #24
 80059d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80059d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059dc:	e7f4      	b.n	80059c8 <__kernel_rem_pio2f+0x25c>
 80059de:	a906      	add	r1, sp, #24
 80059e0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80059e4:	3801      	subs	r0, #1
 80059e6:	430a      	orrs	r2, r1
 80059e8:	e7a9      	b.n	800593e <__kernel_rem_pio2f+0x1d2>
 80059ea:	f10c 0c01 	add.w	ip, ip, #1
 80059ee:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80059f2:	2a00      	cmp	r2, #0
 80059f4:	d0f9      	beq.n	80059ea <__kernel_rem_pio2f+0x27e>
 80059f6:	eb0b 0305 	add.w	r3, fp, r5
 80059fa:	aa1a      	add	r2, sp, #104	; 0x68
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	1898      	adds	r0, r3, r2
 8005a00:	3004      	adds	r0, #4
 8005a02:	1c69      	adds	r1, r5, #1
 8005a04:	3704      	adds	r7, #4
 8005a06:	2200      	movs	r2, #0
 8005a08:	4465      	add	r5, ip
 8005a0a:	9005      	str	r0, [sp, #20]
 8005a0c:	428d      	cmp	r5, r1
 8005a0e:	f6ff af0a 	blt.w	8005826 <__kernel_rem_pio2f+0xba>
 8005a12:	a81a      	add	r0, sp, #104	; 0x68
 8005a14:	eb02 0c03 	add.w	ip, r2, r3
 8005a18:	4484      	add	ip, r0
 8005a1a:	9803      	ldr	r0, [sp, #12]
 8005a1c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005a20:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8005a24:	9001      	str	r0, [sp, #4]
 8005a26:	ee07 0a90 	vmov	s15, r0
 8005a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a2e:	9805      	ldr	r0, [sp, #20]
 8005a30:	edcc 7a00 	vstr	s15, [ip]
 8005a34:	eddf 7a13 	vldr	s15, [pc, #76]	; 8005a84 <__kernel_rem_pio2f+0x318>
 8005a38:	eb00 0802 	add.w	r8, r0, r2
 8005a3c:	f04f 0c00 	mov.w	ip, #0
 8005a40:	45d4      	cmp	ip, sl
 8005a42:	dd0c      	ble.n	8005a5e <__kernel_rem_pio2f+0x2f2>
 8005a44:	eb02 0c07 	add.w	ip, r2, r7
 8005a48:	a842      	add	r0, sp, #264	; 0x108
 8005a4a:	4484      	add	ip, r0
 8005a4c:	edcc 7a01 	vstr	s15, [ip, #4]
 8005a50:	3101      	adds	r1, #1
 8005a52:	3204      	adds	r2, #4
 8005a54:	e7da      	b.n	8005a0c <__kernel_rem_pio2f+0x2a0>
 8005a56:	9b04      	ldr	r3, [sp, #16]
 8005a58:	f04f 0c01 	mov.w	ip, #1
 8005a5c:	e7c7      	b.n	80059ee <__kernel_rem_pio2f+0x282>
 8005a5e:	ecfe 6a01 	vldmia	lr!, {s13}
 8005a62:	ed38 7a01 	vldmdb	r8!, {s14}
 8005a66:	f10c 0c01 	add.w	ip, ip, #1
 8005a6a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005a6e:	e7e7      	b.n	8005a40 <__kernel_rem_pio2f+0x2d4>
 8005a70:	3b01      	subs	r3, #1
 8005a72:	e769      	b.n	8005948 <__kernel_rem_pio2f+0x1dc>
 8005a74:	08006298 	.word	0x08006298
 8005a78:	0800626c 	.word	0x0800626c
 8005a7c:	43800000 	.word	0x43800000
 8005a80:	3b800000 	.word	0x3b800000
 8005a84:	00000000 	.word	0x00000000
 8005a88:	4260      	negs	r0, r4
 8005a8a:	eeb0 0a48 	vmov.f32	s0, s16
 8005a8e:	f000 f981 	bl	8005d94 <scalbnf>
 8005a92:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8005a7c <__kernel_rem_pio2f+0x310>
 8005a96:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a9e:	db1a      	blt.n	8005ad6 <__kernel_rem_pio2f+0x36a>
 8005aa0:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8005a80 <__kernel_rem_pio2f+0x314>
 8005aa4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005aa8:	aa06      	add	r2, sp, #24
 8005aaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005aae:	a906      	add	r1, sp, #24
 8005ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ab4:	3408      	adds	r4, #8
 8005ab6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005aba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005abe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005ac2:	ee10 3a10 	vmov	r3, s0
 8005ac6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8005aca:	1c6b      	adds	r3, r5, #1
 8005acc:	ee17 2a90 	vmov	r2, s15
 8005ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005ad4:	e73f      	b.n	8005956 <__kernel_rem_pio2f+0x1ea>
 8005ad6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005ada:	aa06      	add	r2, sp, #24
 8005adc:	ee10 3a10 	vmov	r3, s0
 8005ae0:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8005ae4:	462b      	mov	r3, r5
 8005ae6:	e736      	b.n	8005956 <__kernel_rem_pio2f+0x1ea>
 8005ae8:	aa06      	add	r2, sp, #24
 8005aea:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8005aee:	9202      	str	r2, [sp, #8]
 8005af0:	ee07 2a90 	vmov	s15, r2
 8005af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005af8:	3c01      	subs	r4, #1
 8005afa:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005afe:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005b02:	ed65 7a01 	vstmdb	r5!, {s15}
 8005b06:	e734      	b.n	8005972 <__kernel_rem_pio2f+0x206>
 8005b08:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8005b0c:	ecf7 6a01 	vldmia	r7!, {s13}
 8005b10:	ed9c 7a00 	vldr	s14, [ip]
 8005b14:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005b18:	3401      	adds	r4, #1
 8005b1a:	454c      	cmp	r4, r9
 8005b1c:	dc01      	bgt.n	8005b22 <__kernel_rem_pio2f+0x3b6>
 8005b1e:	42a5      	cmp	r5, r4
 8005b20:	daf2      	bge.n	8005b08 <__kernel_rem_pio2f+0x39c>
 8005b22:	aa56      	add	r2, sp, #344	; 0x158
 8005b24:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8005b28:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8005b2c:	3501      	adds	r5, #1
 8005b2e:	3804      	subs	r0, #4
 8005b30:	e723      	b.n	800597a <__kernel_rem_pio2f+0x20e>
 8005b32:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005b34:	2a03      	cmp	r2, #3
 8005b36:	d84d      	bhi.n	8005bd4 <__kernel_rem_pio2f+0x468>
 8005b38:	e8df f002 	tbb	[pc, r2]
 8005b3c:	021f1f3e 	.word	0x021f1f3e
 8005b40:	aa56      	add	r2, sp, #344	; 0x158
 8005b42:	4411      	add	r1, r2
 8005b44:	399c      	subs	r1, #156	; 0x9c
 8005b46:	4608      	mov	r0, r1
 8005b48:	461c      	mov	r4, r3
 8005b4a:	2c00      	cmp	r4, #0
 8005b4c:	dc5f      	bgt.n	8005c0e <__kernel_rem_pio2f+0x4a2>
 8005b4e:	4608      	mov	r0, r1
 8005b50:	461c      	mov	r4, r3
 8005b52:	2c01      	cmp	r4, #1
 8005b54:	dc6b      	bgt.n	8005c2e <__kernel_rem_pio2f+0x4c2>
 8005b56:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8005a84 <__kernel_rem_pio2f+0x318>
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	dc77      	bgt.n	8005c4e <__kernel_rem_pio2f+0x4e2>
 8005b5e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8005b62:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8005b66:	f1b8 0f00 	cmp.w	r8, #0
 8005b6a:	d176      	bne.n	8005c5a <__kernel_rem_pio2f+0x4ee>
 8005b6c:	edc6 6a00 	vstr	s13, [r6]
 8005b70:	ed86 7a01 	vstr	s14, [r6, #4]
 8005b74:	edc6 7a02 	vstr	s15, [r6, #8]
 8005b78:	e02c      	b.n	8005bd4 <__kernel_rem_pio2f+0x468>
 8005b7a:	aa56      	add	r2, sp, #344	; 0x158
 8005b7c:	4411      	add	r1, r2
 8005b7e:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8005a84 <__kernel_rem_pio2f+0x318>
 8005b82:	399c      	subs	r1, #156	; 0x9c
 8005b84:	4618      	mov	r0, r3
 8005b86:	2800      	cmp	r0, #0
 8005b88:	da32      	bge.n	8005bf0 <__kernel_rem_pio2f+0x484>
 8005b8a:	f1b8 0f00 	cmp.w	r8, #0
 8005b8e:	d035      	beq.n	8005bfc <__kernel_rem_pio2f+0x490>
 8005b90:	eef1 7a47 	vneg.f32	s15, s14
 8005b94:	edc6 7a00 	vstr	s15, [r6]
 8005b98:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8005b9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ba0:	a82f      	add	r0, sp, #188	; 0xbc
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	428b      	cmp	r3, r1
 8005ba6:	da2c      	bge.n	8005c02 <__kernel_rem_pio2f+0x496>
 8005ba8:	f1b8 0f00 	cmp.w	r8, #0
 8005bac:	d001      	beq.n	8005bb2 <__kernel_rem_pio2f+0x446>
 8005bae:	eef1 7a67 	vneg.f32	s15, s15
 8005bb2:	edc6 7a01 	vstr	s15, [r6, #4]
 8005bb6:	e00d      	b.n	8005bd4 <__kernel_rem_pio2f+0x468>
 8005bb8:	aa56      	add	r2, sp, #344	; 0x158
 8005bba:	4411      	add	r1, r2
 8005bbc:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8005a84 <__kernel_rem_pio2f+0x318>
 8005bc0:	399c      	subs	r1, #156	; 0x9c
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	da0e      	bge.n	8005be4 <__kernel_rem_pio2f+0x478>
 8005bc6:	f1b8 0f00 	cmp.w	r8, #0
 8005bca:	d001      	beq.n	8005bd0 <__kernel_rem_pio2f+0x464>
 8005bcc:	eef1 7a67 	vneg.f32	s15, s15
 8005bd0:	edc6 7a00 	vstr	s15, [r6]
 8005bd4:	9b01      	ldr	r3, [sp, #4]
 8005bd6:	f003 0007 	and.w	r0, r3, #7
 8005bda:	b057      	add	sp, #348	; 0x15c
 8005bdc:	ecbd 8b04 	vpop	{d8-d9}
 8005be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be4:	ed31 7a01 	vldmdb	r1!, {s14}
 8005be8:	3b01      	subs	r3, #1
 8005bea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bee:	e7e8      	b.n	8005bc2 <__kernel_rem_pio2f+0x456>
 8005bf0:	ed71 7a01 	vldmdb	r1!, {s15}
 8005bf4:	3801      	subs	r0, #1
 8005bf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bfa:	e7c4      	b.n	8005b86 <__kernel_rem_pio2f+0x41a>
 8005bfc:	eef0 7a47 	vmov.f32	s15, s14
 8005c00:	e7c8      	b.n	8005b94 <__kernel_rem_pio2f+0x428>
 8005c02:	ecb0 7a01 	vldmia	r0!, {s14}
 8005c06:	3101      	adds	r1, #1
 8005c08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c0c:	e7ca      	b.n	8005ba4 <__kernel_rem_pio2f+0x438>
 8005c0e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8005c12:	ed70 6a01 	vldmdb	r0!, {s13}
 8005c16:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005c1a:	3c01      	subs	r4, #1
 8005c1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c20:	ed00 7a01 	vstr	s14, [r0, #-4]
 8005c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c28:	edc0 7a00 	vstr	s15, [r0]
 8005c2c:	e78d      	b.n	8005b4a <__kernel_rem_pio2f+0x3de>
 8005c2e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8005c32:	ed70 6a01 	vldmdb	r0!, {s13}
 8005c36:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005c3a:	3c01      	subs	r4, #1
 8005c3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c40:	ed00 7a01 	vstr	s14, [r0, #-4]
 8005c44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c48:	edc0 7a00 	vstr	s15, [r0]
 8005c4c:	e781      	b.n	8005b52 <__kernel_rem_pio2f+0x3e6>
 8005c4e:	ed31 7a01 	vldmdb	r1!, {s14}
 8005c52:	3b01      	subs	r3, #1
 8005c54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c58:	e77f      	b.n	8005b5a <__kernel_rem_pio2f+0x3ee>
 8005c5a:	eef1 6a66 	vneg.f32	s13, s13
 8005c5e:	eeb1 7a47 	vneg.f32	s14, s14
 8005c62:	edc6 6a00 	vstr	s13, [r6]
 8005c66:	ed86 7a01 	vstr	s14, [r6, #4]
 8005c6a:	eef1 7a67 	vneg.f32	s15, s15
 8005c6e:	e781      	b.n	8005b74 <__kernel_rem_pio2f+0x408>

08005c70 <__kernel_sinf>:
 8005c70:	ee10 3a10 	vmov	r3, s0
 8005c74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c78:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005c7c:	da04      	bge.n	8005c88 <__kernel_sinf+0x18>
 8005c7e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005c82:	ee17 3a90 	vmov	r3, s15
 8005c86:	b35b      	cbz	r3, 8005ce0 <__kernel_sinf+0x70>
 8005c88:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005c8c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005ce4 <__kernel_sinf+0x74>
 8005c90:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005ce8 <__kernel_sinf+0x78>
 8005c94:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005c98:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005cec <__kernel_sinf+0x7c>
 8005c9c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005ca0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8005cf0 <__kernel_sinf+0x80>
 8005ca4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005ca8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005cf4 <__kernel_sinf+0x84>
 8005cac:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005cb0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005cb4:	b930      	cbnz	r0, 8005cc4 <__kernel_sinf+0x54>
 8005cb6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8005cf8 <__kernel_sinf+0x88>
 8005cba:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005cbe:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005cc2:	4770      	bx	lr
 8005cc4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005cc8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005ccc:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005cd0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005cd4:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005cfc <__kernel_sinf+0x8c>
 8005cd8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005cdc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	2f2ec9d3 	.word	0x2f2ec9d3
 8005ce8:	b2d72f34 	.word	0xb2d72f34
 8005cec:	3638ef1b 	.word	0x3638ef1b
 8005cf0:	b9500d01 	.word	0xb9500d01
 8005cf4:	3c088889 	.word	0x3c088889
 8005cf8:	be2aaaab 	.word	0xbe2aaaab
 8005cfc:	3e2aaaab 	.word	0x3e2aaaab

08005d00 <fabsf>:
 8005d00:	ee10 3a10 	vmov	r3, s0
 8005d04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d08:	ee00 3a10 	vmov	s0, r3
 8005d0c:	4770      	bx	lr
	...

08005d10 <floorf>:
 8005d10:	ee10 3a10 	vmov	r3, s0
 8005d14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005d18:	0dca      	lsrs	r2, r1, #23
 8005d1a:	3a7f      	subs	r2, #127	; 0x7f
 8005d1c:	2a16      	cmp	r2, #22
 8005d1e:	dc2a      	bgt.n	8005d76 <floorf+0x66>
 8005d20:	2a00      	cmp	r2, #0
 8005d22:	da11      	bge.n	8005d48 <floorf+0x38>
 8005d24:	eddf 7a18 	vldr	s15, [pc, #96]	; 8005d88 <floorf+0x78>
 8005d28:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005d2c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d34:	dd05      	ble.n	8005d42 <floorf+0x32>
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	da23      	bge.n	8005d82 <floorf+0x72>
 8005d3a:	4a14      	ldr	r2, [pc, #80]	; (8005d8c <floorf+0x7c>)
 8005d3c:	2900      	cmp	r1, #0
 8005d3e:	bf18      	it	ne
 8005d40:	4613      	movne	r3, r2
 8005d42:	ee00 3a10 	vmov	s0, r3
 8005d46:	4770      	bx	lr
 8005d48:	4911      	ldr	r1, [pc, #68]	; (8005d90 <floorf+0x80>)
 8005d4a:	4111      	asrs	r1, r2
 8005d4c:	420b      	tst	r3, r1
 8005d4e:	d0fa      	beq.n	8005d46 <floorf+0x36>
 8005d50:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005d88 <floorf+0x78>
 8005d54:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005d58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d60:	ddef      	ble.n	8005d42 <floorf+0x32>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	bfbe      	ittt	lt
 8005d66:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8005d6a:	fa40 f202 	asrlt.w	r2, r0, r2
 8005d6e:	189b      	addlt	r3, r3, r2
 8005d70:	ea23 0301 	bic.w	r3, r3, r1
 8005d74:	e7e5      	b.n	8005d42 <floorf+0x32>
 8005d76:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005d7a:	d3e4      	bcc.n	8005d46 <floorf+0x36>
 8005d7c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005d80:	4770      	bx	lr
 8005d82:	2300      	movs	r3, #0
 8005d84:	e7dd      	b.n	8005d42 <floorf+0x32>
 8005d86:	bf00      	nop
 8005d88:	7149f2ca 	.word	0x7149f2ca
 8005d8c:	bf800000 	.word	0xbf800000
 8005d90:	007fffff 	.word	0x007fffff

08005d94 <scalbnf>:
 8005d94:	b508      	push	{r3, lr}
 8005d96:	ee10 2a10 	vmov	r2, s0
 8005d9a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8005d9e:	ed2d 8b02 	vpush	{d8}
 8005da2:	eef0 0a40 	vmov.f32	s1, s0
 8005da6:	d004      	beq.n	8005db2 <scalbnf+0x1e>
 8005da8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005dac:	d306      	bcc.n	8005dbc <scalbnf+0x28>
 8005dae:	ee70 0a00 	vadd.f32	s1, s0, s0
 8005db2:	ecbd 8b02 	vpop	{d8}
 8005db6:	eeb0 0a60 	vmov.f32	s0, s1
 8005dba:	bd08      	pop	{r3, pc}
 8005dbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005dc0:	d21c      	bcs.n	8005dfc <scalbnf+0x68>
 8005dc2:	4b1f      	ldr	r3, [pc, #124]	; (8005e40 <scalbnf+0xac>)
 8005dc4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005e44 <scalbnf+0xb0>
 8005dc8:	4298      	cmp	r0, r3
 8005dca:	ee60 0a27 	vmul.f32	s1, s0, s15
 8005dce:	db10      	blt.n	8005df2 <scalbnf+0x5e>
 8005dd0:	ee10 2a90 	vmov	r2, s1
 8005dd4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8005dd8:	3b19      	subs	r3, #25
 8005dda:	4403      	add	r3, r0
 8005ddc:	2bfe      	cmp	r3, #254	; 0xfe
 8005dde:	dd0f      	ble.n	8005e00 <scalbnf+0x6c>
 8005de0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8005e48 <scalbnf+0xb4>
 8005de4:	eeb0 0a48 	vmov.f32	s0, s16
 8005de8:	f000 f834 	bl	8005e54 <copysignf>
 8005dec:	ee60 0a08 	vmul.f32	s1, s0, s16
 8005df0:	e7df      	b.n	8005db2 <scalbnf+0x1e>
 8005df2:	eddf 7a16 	vldr	s15, [pc, #88]	; 8005e4c <scalbnf+0xb8>
 8005df6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8005dfa:	e7da      	b.n	8005db2 <scalbnf+0x1e>
 8005dfc:	0ddb      	lsrs	r3, r3, #23
 8005dfe:	e7ec      	b.n	8005dda <scalbnf+0x46>
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	dd06      	ble.n	8005e12 <scalbnf+0x7e>
 8005e04:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005e08:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005e0c:	ee00 3a90 	vmov	s1, r3
 8005e10:	e7cf      	b.n	8005db2 <scalbnf+0x1e>
 8005e12:	f113 0f16 	cmn.w	r3, #22
 8005e16:	da06      	bge.n	8005e26 <scalbnf+0x92>
 8005e18:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005e1c:	4298      	cmp	r0, r3
 8005e1e:	dcdf      	bgt.n	8005de0 <scalbnf+0x4c>
 8005e20:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8005e4c <scalbnf+0xb8>
 8005e24:	e7de      	b.n	8005de4 <scalbnf+0x50>
 8005e26:	3319      	adds	r3, #25
 8005e28:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005e2c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005e30:	eddf 7a07 	vldr	s15, [pc, #28]	; 8005e50 <scalbnf+0xbc>
 8005e34:	ee07 3a10 	vmov	s14, r3
 8005e38:	ee67 0a27 	vmul.f32	s1, s14, s15
 8005e3c:	e7b9      	b.n	8005db2 <scalbnf+0x1e>
 8005e3e:	bf00      	nop
 8005e40:	ffff3cb0 	.word	0xffff3cb0
 8005e44:	4c000000 	.word	0x4c000000
 8005e48:	7149f2ca 	.word	0x7149f2ca
 8005e4c:	0da24260 	.word	0x0da24260
 8005e50:	33000000 	.word	0x33000000

08005e54 <copysignf>:
 8005e54:	ee10 3a10 	vmov	r3, s0
 8005e58:	ee10 2a90 	vmov	r2, s1
 8005e5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e60:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005e64:	4313      	orrs	r3, r2
 8005e66:	ee00 3a10 	vmov	s0, r3
 8005e6a:	4770      	bx	lr

08005e6c <_init>:
 8005e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6e:	bf00      	nop
 8005e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e72:	bc08      	pop	{r3}
 8005e74:	469e      	mov	lr, r3
 8005e76:	4770      	bx	lr

08005e78 <_fini>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	bf00      	nop
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr
